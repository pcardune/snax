extern wasi_unstable {
  func fd_write(
    fileDescriptor:i32,
    iovPointer:i32,
    iovLength:i32,
    numWrittenPointer:i32
  ):i32;

  func fd_read(
    fileDescriptor:i32,
    iovPointer:i32,
    iovLength:i32,
    numWrittenPointer:i32,
  ):i32;
}

func run() {
  let keepGoing = true;
  let lineCount = 0;
  while (keepGoing) {
    let s = read(100);

    let i = 0;
    while (i < s.length) {
      let char = s.buffer[i] as u8;
      if (char == '\n') {
        lineCount = lineCount+1;
      }
      if (char == 0) {
        i = s.length as i32;
        keepGoing = false;
      }
      i = i+1;
    }
  }
  print("Found this many lines: ");
  // print(fmtInt(10));
  print(fmtInt(lineCount));
  print("\n");
}

func fmtInt(i:i32) {
  let s = String::{buffer: malloc(10), length: 10};
  let charIndex = 0;
  if (i == 0) {
    return "0";
  }
  while (i > 0 && charIndex < s.length) {
    let char = 48_u8 + (i % 10) as! u8;
    s.buffer[charIndex] = char;
    charIndex = charIndex + 1;
    i = i / 10;
  }
  // reverse the string
  let j = 0;
  while (j < charIndex/2) {
    let c = s.buffer[j];
    s.buffer[j] = s.buffer[charIndex-j-1];
    s.buffer[charIndex-j-1] = c;
    j = j+1;
  } 
  return s;
}

func print(s:&String) {
  let iovec = [s.buffer as usize, s.length];
  let bytesWritten = [0];
  fd_write(
    1, // stdout
    iovec, // pointer to io vector
    1, // length of io vector
    bytesWritten // where to store number of bytes written
  );
}

func read(length:usize) {
  let s = String::{buffer: malloc(length), length: length};
  let iovec = [s.buffer as usize, s.length];
  let bytesRead = [0];
  fd_read(
    0, // stdin
    iovec,
    1,
    bytesRead
  );
  return s;
}

run();
