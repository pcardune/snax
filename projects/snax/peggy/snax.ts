
// Generated by peggy v. 1.2.0 (ts-pegjs plugin v. 1.2.0 )
//
// https://peggyjs.org/   https://github.com/metadevpro/ts-pegjs

"use strict";


  import * as AST from '../snax-ast';
  import * as spec from '../spec-gen';
  function makeInteger(o:string[]) {
    return parseInt(o.join(""), 10);
  }


export interface IFilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface IFileRange {
  start: IFilePosition;
  end: IFilePosition;
  source: string;
}

export interface ILiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface IClassParts extends Array<string | IClassParts> {}

export interface IClassExpectation {
  type: "class";
  parts: IClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface IAnyExpectation {
  type: "any";
}

export interface IEndExpectation {
  type: "end";
}

export interface IOtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = ILiteralExpectation | IClassExpectation | IAnyExpectation | IEndExpectation | IOtherExpectation;

function peg$padEnd(str: string, targetLength: number, padString: string) {
  padString = padString || ' ';
  if (str.length > targetLength) {
    return str;
  }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

export class SyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null) {
    function hex(ch: string): string {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function classEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function describeExpectation(expectation: Expectation) {
      switch (expectation.type) {
        case "literal":
          return "\"" + literalEscape(expectation.text) + "\"";
        case "class":
          const escapedParts = expectation.parts.map((part) => {
            return Array.isArray(part)
              ? classEscape(part[0] as string) + "-" + classEscape(part[1] as string)
              : classEscape(part);
          });

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        case "any":
          return "any character";
        case "end":
          return "end of input";
        case "other":
          return expectation.description;
      }
    }

    function describeExpected(expected1: Expectation[]) {
      const descriptions = expected1.map(describeExpectation);
      let i: number;
      let j: number;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found1: string | null) {
      return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }

  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: IFileRange;
  public name: string;

  constructor(message: string, expected: Expectation[], found: string | null, location: IFileRange) {
    super();
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof (Object as any).setPrototypeOf === "function") {
      (Object as any).setPrototypeOf(this, SyntaxError.prototype);
    } else {
      (this as any).__proto__ = SyntaxError.prototype;
    }
    if (typeof (Error as any).captureStackTrace === "function") {
      (Error as any).captureStackTrace(this, SyntaxError);
    }
  }

  format(sources: { source: string; text: string }[]): string {
    let str = 'Error: ' + this.message;
    if (this.location) {
      let src = null;
      let k;
      for (k = 0; k < sources.length; k++) {
        if (sources[k].source === this.location.source) {
          src = sources[k].text.split(/\r\n|\n|\r/g);
          break;
        }
      }
      let s = this.location.start;
      let loc = this.location.source + ':' + s.line + ':' + s.column;
      if (src) {
        let e = this.location.end;
        let filler = peg$padEnd('', s.line.toString().length, ' ');
        let line = src[s.line - 1];
        let last = s.line === e.line ? e.column : line.length + 1;
        str += '\n --> ' + loc + '\n' + filler + ' |\n' + s.line + ' | ' + line + '\n' + filler + ' | ' +
          peg$padEnd('', s.column - 1, ' ') +
          peg$padEnd('', last - s.column, '^');
      } else {
        str += '\n at ' + loc;
      }
    }
    return str;
  }
}

export interface ICached {
  nextPos: number;
  result: any;
}

function peg$parse(input: string, options?: IParseOptions) {
  options = options !== undefined ? options : {};

  const peg$FAILED: Readonly<any> = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions: {[id: string]: any} = { start: peg$parsestart, expr: peg$parseexpr, statement: peg$parsestatement, block: peg$parseblock, funcDecl: peg$parsefuncDecl, typeExpr: peg$parsetypeExpr };
  let peg$startRuleFunction: () => any = peg$parsestart;

  const peg$c0 = function(block: any): any { return block; };
  const peg$c1 = function(): any { return spec.makeBlock([]); };
  const peg$c2 = peg$otherExpectation("file");
  const peg$c3 = function(statements: any): any {
      let funcs: spec.FuncDecl[] = [];
      let globals: spec.GlobalDecl[] = [];
      let decls = [];
      let mainFuncBody = [];
      for (const statement of statements??[]) {
        if (spec.isFuncDecl(statement)) {
          funcs.push(statement);
        } else if (spec.isGlobalDecl(statement)) {
          globals.push(statement);
        } else if (spec.isStatement(statement)) {
          mainFuncBody.push(statement);
        } else {
          decls.push(statement);
        }
      }
      if (mainFuncBody.length > 0) {
        let lastStatement = mainFuncBody[mainFuncBody.length-1];
        if (spec.isExprStatement(lastStatement)) {
          mainFuncBody[mainFuncBody.length-1] = spec.makeReturnStatement(
            lastStatement.fields.expr
          );
        }
      }
      funcs.push(
        spec.makeFuncDecl('main', spec.makeParameterList([]), undefined, spec.makeBlock(mainFuncBody)))
      return spec.makeFileWith({
        funcs,
        globals,
        decls,
      });
    };
  const peg$c4 = peg$otherExpectation("file statements");
  const peg$c5 = function(head: any, tail: any): any {
      return [head, ...tail.map((t:any)=>t[1])];
    };
  const peg$c6 = peg$otherExpectation("file statement");
  const peg$c7 = "global";
  const peg$c8 = peg$literalExpectation("global", false);
  const peg$c9 = ";";
  const peg$c10 = peg$literalExpectation(";", false);
  const peg$c11 = function(varDecl: any): any {
      return spec.makeGlobalDecl(varDecl.name, varDecl.type, varDecl.expr)
    };
  const peg$c12 = peg$otherExpectation("block");
  const peg$c13 = function(head: any, tail: any): any {
      return spec.makeBlock([
        head,
        ...tail.map((els:any[]) => els[1])
      ]);
    };
  const peg$c14 = peg$otherExpectation("statement");
  const peg$c15 = "let";
  const peg$c16 = peg$literalExpectation("let", false);
  const peg$c17 = function(varDecl: any): any {
      return spec.makeLetStatement(varDecl.name, varDecl.type, varDecl.expr);
    };
  const peg$c18 = "return";
  const peg$c19 = peg$literalExpectation("return", false);
  const peg$c20 = function(expr: any): any {
      return spec.makeReturnStatement(expr);
    };
  const peg$c21 = "{";
  const peg$c22 = peg$literalExpectation("{", false);
  const peg$c23 = "}";
  const peg$c24 = peg$literalExpectation("}", false);
  const peg$c25 = function(expr: any): any {
      return spec.makeExprStatement(expr);
    };
  const peg$c26 = peg$otherExpectation("varDecl");
  const peg$c27 = ":";
  const peg$c28 = peg$literalExpectation(":", false);
  const peg$c29 = "=";
  const peg$c30 = peg$literalExpectation("=", false);
  const peg$c31 = function(name: any, type: any, expr: any): any {
      return {name, type:type ? type[2] : undefined, expr};
    };
  const peg$c32 = peg$otherExpectation("while statement");
  const peg$c33 = "while";
  const peg$c34 = peg$literalExpectation("while", false);
  const peg$c35 = "(";
  const peg$c36 = peg$literalExpectation("(", false);
  const peg$c37 = ")";
  const peg$c38 = peg$literalExpectation(")", false);
  const peg$c39 = function(condExpr: any, thenBlock: any): any {
        return spec.makeWhileStatement(
          condExpr,
          thenBlock
        );
      };
  const peg$c40 = peg$otherExpectation("if statement");
  const peg$c41 = "if";
  const peg$c42 = peg$literalExpectation("if", false);
  const peg$c43 = "else";
  const peg$c44 = peg$literalExpectation("else", false);
  const peg$c45 = function(condExpr: any, thenBlock: any, elseBlock: any): any {
      return spec.makeIfStatement(
        condExpr,
        thenBlock,
        elseBlock ? elseBlock[4] : spec.makeBlock([])
      );
    };
  const peg$c46 = "extern";
  const peg$c47 = peg$literalExpectation("extern", false);
  const peg$c48 = function(name: any, decls: any): any {
    return spec.makeExternDeclWith({
      libName: name,
      funcs: decls.map((begin:any) => {
        return spec.makeFuncDecl(
          begin.name,
          begin.parameters,
          begin.returnType,
          spec.makeBlock([]),
        );
      })
    });
  };
  const peg$c49 = function(head: any, tail: any): any {
    return [head, ...tail.map((p:any[])=> p[1])];
  };
  const peg$c50 = function(begin: any, body: any): any {
      return spec.makeFuncDecl(
        begin.name,
        begin.parameters,
        begin.returnType,
        body || spec.makeBlock([]),
      );
    };
  const peg$c51 = "func";
  const peg$c52 = peg$literalExpectation("func", false);
  const peg$c53 = function(name: any, parameters: any, returns: any): any {
    return {
      name,
      parameters: parameters || spec.makeParameterList([]),
      returnType: returns ? returns[2] : undefined,
    };
  };
  const peg$c54 = peg$otherExpectation("parameterList");
  const peg$c55 = ",";
  const peg$c56 = peg$literalExpectation(",", false);
  const peg$c57 = function(head: any, tail: any): any {
      return spec.makeParameterList([head, ...tail.map((p:any[]) => p[3])])
    };
  const peg$c58 = peg$otherExpectation("parameter");
  const peg$c59 = function(name: any, type: any): any {
      return spec.makeParameter(name, type);
    };
  const peg$c60 = peg$otherExpectation("typeExpr");
  const peg$c61 = "&";
  const peg$c62 = peg$literalExpectation("&", false);
  const peg$c63 = function(expr: any): any { return spec.makePointerTypeExpr(expr); };
  const peg$c64 = peg$otherExpectation("typeRef");
  const peg$c65 = function(name: any): any { return spec.makeTypeRef(name); };
  const peg$c66 = peg$otherExpectation("expr");
  const peg$c67 = peg$otherExpectation("assignment");
  const peg$c68 = function(left: any, right: any): any {
      return spec.makeBinaryExpr(AST.BinaryOp.ASSIGN, left, right);
    };
  const peg$c69 = peg$otherExpectation("bool or");
  const peg$c70 = "||";
  const peg$c71 = peg$literalExpectation("||", false);
  const peg$c72 = function(left: any, right: any): any {
      return spec.makeBinaryExpr(AST.BinaryOp.LOGICAL_OR, left, right);
    };
  const peg$c73 = peg$otherExpectation("bool and");
  const peg$c74 = "&&";
  const peg$c75 = peg$literalExpectation("&&", false);
  const peg$c76 = function(left: any, right: any): any {
      return spec.makeBinaryExpr(AST.BinaryOp.LOGICAL_AND, left, right);
    };
  const peg$c77 = peg$otherExpectation("equality");
  const peg$c78 = "==";
  const peg$c79 = peg$literalExpectation("==", false);
  const peg$c80 = "!=";
  const peg$c81 = peg$literalExpectation("!=", false);
  const peg$c82 = function(left: any, op: any, right: any): any {
      return spec.makeBinaryExpr(
        op === "!=" ? AST.BinaryOp.NOT_EQUAL_TO : AST.BinaryOp.EQUAL_TO,
        left,
        right
      );
    };
  const peg$c83 = peg$otherExpectation("ordering");
  const peg$c84 = "<";
  const peg$c85 = peg$literalExpectation("<", false);
  const peg$c86 = ">";
  const peg$c87 = peg$literalExpectation(">", false);
  const peg$c88 = function(left: any, op: any, right: any): any {
      return spec.makeBinaryExpr(
        op==="<" ? AST.BinaryOp.LESS_THAN : AST.BinaryOp.GREATER_THAN,
        left,
        right
      );
    };
  const peg$c89 = peg$otherExpectation("additive");
  const peg$c90 = "+";
  const peg$c91 = peg$literalExpectation("+", false);
  const peg$c92 = "-";
  const peg$c93 = peg$literalExpectation("-", false);
  const peg$c94 = function(left: any, right: any): any {
      return right.reduce((result: spec.Expression, element: any[]) => {
        let op = element[1] === "+" ? AST.BinaryOp.ADD : AST.BinaryOp.SUB;
        return spec.makeBinaryExpr(op, result, element[3]);
      }, left);
    };
  const peg$c95 = peg$otherExpectation("term");
  const peg$c96 = "*";
  const peg$c97 = peg$literalExpectation("*", false);
  const peg$c98 = "/";
  const peg$c99 = peg$literalExpectation("/", false);
  const peg$c100 = function(left: any, right: any): any {
      return right.reduce((result: spec.Expression, element: any[]) => {
        let op = element[1] === "*" ? AST.BinaryOp.MUL : AST.BinaryOp.DIV;
        return spec.makeBinaryExpr(op, result, element[3]);
      }, left);
    };
  const peg$c101 = peg$otherExpectation("cast");
  const peg$c102 = "as";
  const peg$c103 = peg$literalExpectation("as", false);
  const peg$c104 = function(value: any, typeExpr: any): any {
      return spec.makeCastExpr(value, typeExpr);
    };
  const peg$c105 = peg$otherExpectation("calling");
  const peg$c106 = function(funcExpr: any, argList: any): any {
      return spec.makeCallExpr(funcExpr, spec.makeArgList(argList || []));
    };
  const peg$c107 = peg$otherExpectation("indexing");
  const peg$c108 = "[";
  const peg$c109 = peg$literalExpectation("[", false);
  const peg$c110 = "]";
  const peg$c111 = peg$literalExpectation("]", false);
  const peg$c112 = function(element: any, index: any): any {
      return spec.makeBinaryExpr(AST.BinaryOp.ARRAY_INDEX, element, index);
    };
  const peg$c113 = peg$otherExpectation("deref");
  const peg$c114 = "@";
  const peg$c115 = peg$literalExpectation("@", false);
  const peg$c116 = function(expr: any): any {
      return spec.makeUnaryExpr(AST.UnaryOp.DEREF, expr);
    };
  const peg$c117 = peg$otherExpectation("factor");
  const peg$c118 = function(inner: any): any { return inner; };
  const peg$c119 = peg$otherExpectation("string");
  const peg$c120 = "\"";
  const peg$c121 = peg$literalExpectation("\"", false);
  const peg$c122 = "\\";
  const peg$c123 = peg$literalExpectation("\\", false);
  const peg$c124 = peg$anyExpectation();
  const peg$c125 = /^[^"]/;
  const peg$c126 = peg$classExpectation(["\""], true, false);
  const peg$c127 = function(content: any): any {
      const inner = content.map((c:any) => typeof c === "string" ? c : c.join('')).join('');
      return spec.makeStringLiteral(JSON.parse('"'+inner+'"'));
    };
  const peg$c128 = peg$otherExpectation("char");
  const peg$c129 = "'";
  const peg$c130 = peg$literalExpectation("'", false);
  const peg$c131 = function(content: any): any {
      let s = (content[0] || '') + content[1];
      if (s === "\\'") {
        s = "'";
      } else if (s === '"') {
        s = '\\"';
      }
      return spec.makeCharLiteral(JSON.parse('"'+s+'"').charCodeAt(0));
    };
  const peg$c132 = peg$otherExpectation("array");
  const peg$c133 = function(items: any): any { return spec.makeArrayLiteral(items || []); };
  const peg$c134 = peg$otherExpectation("exprList");
  const peg$c135 = function(head: any, tail: any): any { return [head, ...tail.map((t:any[])=>t[3])]; };
  const peg$c136 = peg$otherExpectation("number");
  const peg$c137 = peg$otherExpectation("integer");
  const peg$c138 = /^[0-9]/;
  const peg$c139 = peg$classExpectation([["0", "9"]], false, false);
  const peg$c140 = "_";
  const peg$c141 = peg$literalExpectation("_", false);
  const peg$c142 = "i";
  const peg$c143 = peg$literalExpectation("i", false);
  const peg$c144 = "u";
  const peg$c145 = peg$literalExpectation("u", false);
  const peg$c146 = "8";
  const peg$c147 = peg$literalExpectation("8", false);
  const peg$c148 = "16";
  const peg$c149 = peg$literalExpectation("16", false);
  const peg$c150 = "32";
  const peg$c151 = peg$literalExpectation("32", false);
  const peg$c152 = "64";
  const peg$c153 = peg$literalExpectation("64", false);
  const peg$c154 = function(digits: any, type: any): any {
      return spec.makeNumberLiteral(
        parseInt(digits.join('')),
        AST.NumberLiteralType.Integer,
        type? type.slice(1).join('') : undefined
      );
    };
  const peg$c155 = peg$otherExpectation("float");
  const peg$c156 = ".";
  const peg$c157 = peg$literalExpectation(".", false);
  const peg$c158 = function(leftDigits: any, rightDigits: any): any {
      return spec.makeNumberLiteral(
        parseFloat(leftDigits.join('') + '.' + rightDigits.join('')),
        AST.NumberLiteralType.Float,
        undefined
      )
    };
  const peg$c159 = "true";
  const peg$c160 = peg$literalExpectation("true", false);
  const peg$c161 = function(): any { return spec.makeBooleanLiteral(true); };
  const peg$c162 = "false";
  const peg$c163 = peg$literalExpectation("false", false);
  const peg$c164 = function(): any { return spec.makeBooleanLiteral(false); };
  const peg$c165 = peg$otherExpectation("symbol");
  const peg$c166 = function(name: any): any { return spec.makeSymbolRef(name); };
  const peg$c167 = peg$otherExpectation("identifier");
  const peg$c168 = /^[a-z_]/i;
  const peg$c169 = peg$classExpectation([["a", "z"], "_"], false, true);
  const peg$c170 = /^[a-z0-9_]/i;
  const peg$c171 = peg$classExpectation([["a", "z"], ["0", "9"], "_"], false, true);
  const peg$c172 = function(prefix: any, suffix: any): any { return prefix+suffix.join(''); };
  const peg$c173 = /^[ \n\t\r]/;
  const peg$c174 = peg$classExpectation([" ", "\n", "\t", "\r"], false, false);
  const peg$c175 = "//";
  const peg$c176 = peg$literalExpectation("//", false);
  const peg$c177 = /^[^\n]/;
  const peg$c178 = peg$classExpectation(["\n"], true, false);

  let peg$currPos = 0;
  let peg$savedPos = 0;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = 0;
  let peg$maxFailExpected: Expectation[] = [];
  let peg$silentFails = 0;

  const peg$resultsCache: {[id: number]: ICached} = {};

  let peg$result;

  if (options.startRule !== undefined) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text(): string {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location(): IFileRange {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location1
    );
  }

  function error(message: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(text1: string, ignoreCase: boolean): ILiteralExpectation {
    return { type: "literal", text: text1, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts: IClassParts, inverted: boolean, ignoreCase: boolean): IClassExpectation {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation(): IAnyExpectation {
    return { type: "any" };
  }

  function peg$endExpectation(): IEndExpectation {
    return { type: "end" };
  }

  function peg$otherExpectation(description: string): IOtherExpectation {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos: number) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos: number, endPos: number): IFileRange {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected1: Expectation) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message: string, location1: IFileRange) {
    return new SyntaxError(message, [], "", location1);
  }

  function peg$buildStructuredError(expected1: Expectation[], found: string | null, location1: IFileRange) {
    return new SyntaxError(
      SyntaxError.buildMessage(expected1, found),
      expected1,
      found,
      location1
    );
  }

  function peg$parsestart(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 42 + 0;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parsefile();
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 as any !== peg$FAILED) {
        s2 = peg$parseblock();
        if (s2 as any !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 as any === peg$FAILED) {
        s0 = peg$parsestatement();
        if (s0 as any === peg$FAILED) {
          s0 = peg$parseexpr();
          if (s0 as any === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsews();
            if (s1 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c1();
            }
            s0 = s1;
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsefile(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 42 + 1;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsefileStatementList();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parsews();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c3(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsefileStatementList(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 42 + 2;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsefileStatement();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsews();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parsefileStatement();
        if (s5 as any !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsews();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parsefileStatement();
          if (s5 as any !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c4); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsefileStatement(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    const key = peg$currPos * 42 + 3;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c7) {
      s1 = peg$c7;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c8); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parsevarDecl();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s5 = peg$c9;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 as any !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c11(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parsefuncDecl();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseexternDecl();
        if (s0 as any === peg$FAILED) {
          s0 = peg$parsestatement();
        }
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseblock(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    const key = peg$currPos * 42 + 4;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsestatement();
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parsews();
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parsestatement();
          if (s6 as any !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parsews();
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parsestatement();
            if (s6 as any !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c13(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c12); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsestatement(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    const key = peg$currPos * 42 + 5;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c15) {
      s1 = peg$c15;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c16); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parsevarDecl();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s5 = peg$c9;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 as any !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c17(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseifStatement();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parsewhileStatement();
        if (s0 as any === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c18) {
            s1 = peg$c18;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c19); }
          }
          if (s1 as any !== peg$FAILED) {
            s2 = peg$parsews();
            if (s2 as any !== peg$FAILED) {
              s3 = peg$parseexpr();
              if (s3 as any === peg$FAILED) {
                s3 = null;
              }
              if (s3 as any !== peg$FAILED) {
                s4 = peg$parsews();
                if (s4 as any !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s5 = peg$c9;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c10); }
                  }
                  if (s5 as any !== peg$FAILED) {
                    s6 = peg$parsews();
                    if (s6 as any !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c20(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 as any === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
              s1 = peg$c21;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c22); }
            }
            if (s1 as any !== peg$FAILED) {
              s2 = peg$parsews();
              if (s2 as any !== peg$FAILED) {
                s3 = peg$parseblock();
                if (s3 as any !== peg$FAILED) {
                  s4 = peg$parsews();
                  if (s4 as any !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s5 = peg$c23;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c24); }
                    }
                    if (s5 as any !== peg$FAILED) {
                      s6 = peg$parsews();
                      if (s6 as any !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c0(s3);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 as any === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseexpr();
              if (s1 as any !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 as any !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s3 = peg$c9;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c10); }
                  }
                  if (s3 as any !== peg$FAILED) {
                    s4 = peg$parsews();
                    if (s4 as any !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c25(s1);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c14); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsevarDecl(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 42 + 6;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 58) {
          s4 = peg$c27;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c28); }
        }
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parsews();
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parsetypeExpr();
            if (s6 as any !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s5 = peg$c29;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c30); }
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseexpr();
                if (s7 as any !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c31(s1, s3, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c26); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsewhileStatement(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    const key = peg$currPos * 42 + 7;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c33) {
      s1 = peg$c33;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c34); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c35;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseexpr();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 as any !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s7 = peg$c37;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c38); }
                }
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parsews();
                  if (s8 as any !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 123) {
                      s9 = peg$c21;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                    }
                    if (s9 as any !== peg$FAILED) {
                      s10 = peg$parsews();
                      if (s10 as any !== peg$FAILED) {
                        s11 = peg$parseblock();
                        if (s11 as any !== peg$FAILED) {
                          s12 = peg$parsews();
                          if (s12 as any !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 125) {
                              s13 = peg$c23;
                              peg$currPos++;
                            } else {
                              s13 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c24); }
                            }
                            if (s13 as any !== peg$FAILED) {
                              s14 = peg$parsews();
                              if (s14 as any !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c39(s5, s11);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c32); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseifStatement(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23;

    const key = peg$currPos * 42 + 8;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c41) {
      s1 = peg$c41;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c42); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c35;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseexpr();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 as any !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s7 = peg$c37;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c38); }
                }
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parsews();
                  if (s8 as any !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 123) {
                      s9 = peg$c21;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                    }
                    if (s9 as any !== peg$FAILED) {
                      s10 = peg$parsews();
                      if (s10 as any !== peg$FAILED) {
                        s11 = peg$parseblock();
                        if (s11 as any !== peg$FAILED) {
                          s12 = peg$parsews();
                          if (s12 as any !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 125) {
                              s13 = peg$c23;
                              peg$currPos++;
                            } else {
                              s13 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c24); }
                            }
                            if (s13 as any !== peg$FAILED) {
                              s14 = peg$parsews();
                              if (s14 as any !== peg$FAILED) {
                                s15 = peg$currPos;
                                if (input.substr(peg$currPos, 4) === peg$c43) {
                                  s16 = peg$c43;
                                  peg$currPos += 4;
                                } else {
                                  s16 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c44); }
                                }
                                if (s16 as any !== peg$FAILED) {
                                  s17 = peg$parsews();
                                  if (s17 as any !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 123) {
                                      s18 = peg$c21;
                                      peg$currPos++;
                                    } else {
                                      s18 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                    }
                                    if (s18 as any !== peg$FAILED) {
                                      s19 = peg$parsews();
                                      if (s19 as any !== peg$FAILED) {
                                        s20 = peg$parseblock();
                                        if (s20 as any !== peg$FAILED) {
                                          s21 = peg$parsews();
                                          if (s21 as any !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 125) {
                                              s22 = peg$c23;
                                              peg$currPos++;
                                            } else {
                                              s22 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c24); }
                                            }
                                            if (s22 as any !== peg$FAILED) {
                                              s23 = peg$parsews();
                                              if (s23 as any !== peg$FAILED) {
                                                s16 = [s16, s17, s18, s19, s20, s21, s22, s23];
                                                s15 = s16;
                                              } else {
                                                peg$currPos = s15;
                                                s15 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s15;
                                              s15 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s15;
                                            s15 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s15;
                                          s15 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s15;
                                        s15 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s15;
                                      s15 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s15;
                                    s15 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s15;
                                  s15 = peg$FAILED;
                                }
                                if (s15 as any === peg$FAILED) {
                                  s15 = null;
                                }
                                if (s15 as any !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c45(s5, s11, s15);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c40); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseexternDecl(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    const key = peg$currPos * 42 + 9;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c46) {
      s1 = peg$c46;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c47); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseidentifier();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s5 = peg$c21;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c22); }
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseexternDeclList();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parsews();
                  if (s8 as any !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s9 = peg$c23;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c24); }
                    }
                    if (s9 as any !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c48(s3, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseexternDeclList(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    const key = peg$currPos * 42 + 10;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsefuncDeclBegin();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s3 = peg$c9;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsews();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parsefuncDeclBegin();
            if (s7 as any !== peg$FAILED) {
              s8 = peg$parsews();
              if (s8 as any !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 59) {
                  s9 = peg$c9;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c10); }
                }
                if (s9 as any !== peg$FAILED) {
                  s6 = [s6, s7, s8, s9];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 as any !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsews();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parsefuncDeclBegin();
              if (s7 as any !== peg$FAILED) {
                s8 = peg$parsews();
                if (s8 as any !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s9 = peg$c9;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c10); }
                  }
                  if (s9 as any !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c49(s1, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsefuncDecl(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 42 + 11;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsefuncDeclBegin();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s3 = peg$c21;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c22); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseblock();
            if (s5 as any === peg$FAILED) {
              s5 = null;
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 as any !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s7 = peg$c23;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c24); }
                }
                if (s7 as any !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c50(s1, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsefuncDeclBegin(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    const key = peg$currPos * 42 + 12;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c51) {
      s1 = peg$c51;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c52); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseidentifier();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s5 = peg$c35;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseparameterList();
                if (s7 as any === peg$FAILED) {
                  s7 = null;
                }
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parsews();
                  if (s8 as any !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s9 = peg$c37;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c38); }
                    }
                    if (s9 as any !== peg$FAILED) {
                      s10 = peg$parsews();
                      if (s10 as any !== peg$FAILED) {
                        s11 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 58) {
                          s12 = peg$c27;
                          peg$currPos++;
                        } else {
                          s12 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c28); }
                        }
                        if (s12 as any !== peg$FAILED) {
                          s13 = peg$parsews();
                          if (s13 as any !== peg$FAILED) {
                            s14 = peg$parsetypeExpr();
                            if (s14 as any !== peg$FAILED) {
                              s12 = [s12, s13, s14];
                              s11 = s12;
                            } else {
                              peg$currPos = s11;
                              s11 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                        if (s11 as any === peg$FAILED) {
                          s11 = null;
                        }
                        if (s11 as any !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c53(s3, s7, s11);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseparameterList(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 42 + 13;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseparameter();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsews();
      if (s4 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c55;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c56); }
        }
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parsews();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseparameter();
            if (s7 as any !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsews();
        if (s4 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c55;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c56); }
          }
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parsews();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseparameter();
              if (s7 as any !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c57(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c54); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseparameter(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 42 + 14;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c27;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c28); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parsetypeExpr();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c59(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c58); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsetypeExpr(): any {
    let s0, s1, s2;

    const key = peg$currPos * 42 + 15;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 38) {
      s1 = peg$c61;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c62); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsetypeExpr();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c63(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parsetypeRef();
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsetypeRef(): any {
    let s0, s1;

    const key = peg$currPos * 42 + 16;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c65(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c64); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseexpr(): any {
    let s0, s1;

    const key = peg$currPos * 42 + 17;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$parseassignment();
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c66); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseassignment(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 42 + 18;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsebool_or();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c29;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c30); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parsebool_or();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c68(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parsebool_or();
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c67); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsebool_or(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 42 + 19;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsebool_and();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c70) {
          s3 = peg$c70;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c71); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parsebool_and();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c72(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parsebool_and();
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsebool_and(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 42 + 20;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseequality();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c74) {
          s3 = peg$c74;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c75); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseequality();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c76(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseequality();
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c73); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseequality(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 42 + 21;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseordering();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c78) {
          s3 = peg$c78;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c79); }
        }
        if (s3 as any === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c80) {
            s3 = peg$c80;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c81); }
          }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseordering();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c82(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseordering();
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c77); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseordering(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 42 + 22;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseadditive();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 60) {
          s3 = peg$c84;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c85); }
        }
        if (s3 as any === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c86;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c87); }
          }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseadditive();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c88(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseadditive();
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c83); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseadditive(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    const key = peg$currPos * 42 + 23;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseterm();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parsews();
        if (s5 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 43) {
            s6 = peg$c90;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c91); }
          }
          if (s6 as any === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s6 = peg$c92;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c93); }
            }
          }
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parsews();
            if (s7 as any !== peg$FAILED) {
              s8 = peg$parseterm();
              if (s8 as any !== peg$FAILED) {
                s5 = [s5, s6, s7, s8];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parsews();
          if (s5 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s6 = peg$c90;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c91); }
            }
            if (s6 as any === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s6 = peg$c92;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c93); }
              }
            }
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parsews();
              if (s7 as any !== peg$FAILED) {
                s8 = peg$parseterm();
                if (s8 as any !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c94(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseterm();
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c89); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseterm(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    const key = peg$currPos * 42 + 24;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsecasting();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parsews();
        if (s5 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 42) {
            s6 = peg$c96;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c97); }
          }
          if (s6 as any === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s6 = peg$c98;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c99); }
            }
          }
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parsews();
            if (s7 as any !== peg$FAILED) {
              s8 = peg$parsecasting();
              if (s8 as any !== peg$FAILED) {
                s5 = [s5, s6, s7, s8];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parsews();
          if (s5 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 42) {
              s6 = peg$c96;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c97); }
            }
            if (s6 as any === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s6 = peg$c98;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c99); }
              }
            }
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parsews();
              if (s7 as any !== peg$FAILED) {
                s8 = peg$parsecasting();
                if (s8 as any !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c100(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parsecasting();
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c95); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsecasting(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 42 + 25;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsecalling();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c102) {
          s3 = peg$c102;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c103); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parsetypeExpr();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c104(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parsecalling();
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c101); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsecalling(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 42 + 26;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseindexing();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c35;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseexprList();
            if (s5 as any === peg$FAILED) {
              s5 = null;
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 as any !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s7 = peg$c37;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c38); }
                }
                if (s7 as any !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c106(s1, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseindexing();
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c105); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseindexing(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 42 + 27;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsederef();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s3 = peg$c108;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c109); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseexpr();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 as any !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s7 = peg$c110;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c111); }
                }
                if (s7 as any !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c112(s1, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parsederef();
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c107); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsederef(): any {
    let s0, s1, s2;

    const key = peg$currPos * 42 + 28;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c114;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c115); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsefactor();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c116(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parsefactor();
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c113); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsefactor(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 42 + 29;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c35;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseexpr();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s3 = peg$c37;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c38); }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c118(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parsearrayLiteral();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parsestringLiteral();
        if (s0 as any === peg$FAILED) {
          s0 = peg$parsecharLiteral();
          if (s0 as any === peg$FAILED) {
            s0 = peg$parsenumber();
            if (s0 as any === peg$FAILED) {
              s0 = peg$parsebool();
              if (s0 as any === peg$FAILED) {
                s0 = peg$parseid();
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c117); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsestringLiteral(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 42 + 30;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c120;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c121); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s4 = peg$c122;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c123); }
      }
      if (s4 as any !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c124); }
        }
        if (s5 as any !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 as any === peg$FAILED) {
        if (peg$c125.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c126); }
        }
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s4 = peg$c122;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c123); }
        }
        if (s4 as any !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c124); }
          }
          if (s5 as any !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 as any === peg$FAILED) {
          if (peg$c125.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c126); }
          }
        }
      }
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c120;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c121); }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c127(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c119); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsecharLiteral(): any {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 42 + 31;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c129;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c130); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s3 = peg$c122;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c123); }
      }
      if (s3 as any === peg$FAILED) {
        s3 = null;
      }
      if (s3 as any !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c124); }
        }
        if (s4 as any !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c129;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c130); }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c131(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c128); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsearrayLiteral(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 42 + 32;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c108;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c109); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseexprList();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c110;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c111); }
            }
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c133(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c132); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseexprList(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 42 + 33;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseexpr();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsews();
      if (s4 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c55;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c56); }
        }
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parsews();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseexpr();
            if (s7 as any !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsews();
        if (s4 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c55;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c56); }
          }
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parsews();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseexpr();
              if (s7 as any !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c135(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c134); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsenumber(): any {
    let s0, s1;

    const key = peg$currPos * 42 + 34;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$parsefloat();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseinteger();
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c136); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseinteger(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 42 + 35;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c138.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c139); }
    }
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        if (peg$c138.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c139); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 95) {
        s3 = peg$c140;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c141); }
      }
      if (s3 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 105) {
          s4 = peg$c142;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c143); }
        }
        if (s4 as any === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 117) {
            s4 = peg$c144;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c145); }
          }
        }
        if (s4 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 56) {
            s5 = peg$c146;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c147); }
          }
          if (s5 as any === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c148) {
              s5 = peg$c148;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c149); }
            }
            if (s5 as any === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c150) {
                s5 = peg$c150;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c151); }
              }
              if (s5 as any === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c152) {
                  s5 = peg$c152;
                  peg$currPos += 2;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c153); }
                }
              }
            }
          }
          if (s5 as any !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c154(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c137); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsefloat(): any {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 42 + 36;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c138.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c139); }
    }
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        if (peg$c138.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c139); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c156;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c157); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        if (peg$c138.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c139); }
        }
        if (s4 as any !== peg$FAILED) {
          while (s4 as any !== peg$FAILED) {
            s3.push(s4);
            if (peg$c138.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c139); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c158(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c155); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsebool(): any {
    let s0, s1;

    const key = peg$currPos * 42 + 37;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c159) {
      s1 = peg$c159;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c160); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c161();
    }
    s0 = s1;
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c162) {
        s1 = peg$c162;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c163); }
      }
      if (s1 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c164();
      }
      s0 = s1;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseid(): any {
    let s0, s1;

    const key = peg$currPos * 42 + 38;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c166(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c165); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseidentifier(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 42 + 39;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c168.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c169); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      if (peg$c170.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c171); }
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        if (peg$c170.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c171); }
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c172(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c167); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsews(): any {
    let s0, s1;

    const key = peg$currPos * 42 + 40;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = [];
    if (peg$c173.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c174); }
    }
    if (s1 as any === peg$FAILED) {
      s1 = peg$parsecomment();
    }
    while (s1 as any !== peg$FAILED) {
      s0.push(s1);
      if (peg$c173.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c174); }
      }
      if (s1 as any === peg$FAILED) {
        s1 = peg$parsecomment();
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsecomment(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 42 + 41;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c175) {
      s1 = peg$c175;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c176); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      if (peg$c177.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c178); }
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        if (peg$c177.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c178); }
        }
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }


    if (options.multiplier) {
      input = "(" + input + ")*(" + options.multiplier + ")";
    }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export interface IParseOptions {
  filename?: string;
  startRule?: string;
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = (input: string, options?: IParseOptions) => any;
export const parse: ParseFunction = peg$parse;

