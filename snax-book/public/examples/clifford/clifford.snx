import math from "snax/math.snx"

extern console {
  func draw(data:i32, width:i32, height:i32);
}

pub func clifford(a:f32, b:f32, c:f32, d:f32, iterations:i32) {
  reg x0:f32 = 0.0;
  reg y0:f32 = 0.0;
  reg x1:f32;
  reg y1:f32;

  reg width = 1000;
  reg height = 1000;

  let buffer:[[[u8:4]:1000]:1000];
  reg i = 0;
  reg color = iterations/50000;

  while (i < iterations) {

    x1 = math::sinf32(a*y0) + c*math::cosf32(a*x0);
    y1 = math::sinf32(b*x0) + d*math::cosf32(b*y0);

    reg px = $i32_trunc_f32_s((x1 + 1.5) * 270);
    reg py = $i32_trunc_f32_s((y1 + 1.5) * 270);
    if (px < width && py < height) {
      reg value = buffer[py][px][3];
      if (value < 255) {
        value = value + color;
        if (value > 255) {
          value = 255_u8;
        }
        buffer[py][px][3] = value;
      }
    }
    
    x0 = x1;
    y0 = y1;

    i = i+1;
  }
  draw(@buffer as i32, width, height);
}

// just do something...
1;