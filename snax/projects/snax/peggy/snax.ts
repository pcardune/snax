/* eslint-disable */


import * as AST from "../snax-ast.js";
import * as specGen from "../spec-gen.js";
const peggyParser: {parse: any, SyntaxError: any, DefaultTracer?: any} = // Generated by Peggy 3.0.2.
//
// https://peggyjs.org/
// @ts-ignore
(function() {
// @ts-ignore
  "use strict";


  // eslint-ignore-file
// @ts-ignore
  function makeInteger(o:string[]) {
// @ts-ignore
    return parseInt(o.join(""), 10);
  }
// @ts-ignore
  function leftAssoc(
// @ts-ignore
    rest:any[],
// @ts-ignore
    val:any,
// @ts-ignore
    func:(p:{operator:any, left:any, right:any})=>any,
// @ts-ignore
    getVal=(last:any) => last[0],
// @ts-ignore
  ):any {
// @ts-ignore
    if (rest.length == 0) {
// @ts-ignore
      return val; 
    }
// @ts-ignore
    const last = rest.pop();
// @ts-ignore
    return func({
// @ts-ignore
      left: leftAssoc(rest, getVal(last), func, getVal),
// @ts-ignore
      operator: last[last.length-2],
// @ts-ignore
      right: val
    });
  }
// @ts-ignore
  function rightAssoc(val:any, rest:any[], func:(p:{operator:any, left:any, right:any})=>any):any {
// @ts-ignore
    if (rest.length == 0) {
// @ts-ignore
      return val;
    }
// @ts-ignore
    const first = rest.shift();
// @ts-ignore
    return func({
// @ts-ignore
      left:val,
// @ts-ignore
      operator:first[0],
// @ts-ignore
      right:rightAssoc(first[first.length-1], rest, func)
    });
  }

// @ts-ignore
function peg$subclass(child, parent) {
// @ts-ignore
  function C() { this.constructor = child; }
// @ts-ignore
  C.prototype = parent.prototype;
// @ts-ignore
  child.prototype = new C();
}

// @ts-ignore
function peg$SyntaxError(message, expected, found, location) {
// @ts-ignore
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
// @ts-ignore
  if (Object.setPrototypeOf) {
// @ts-ignore
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
// @ts-ignore
  self.expected = expected;
// @ts-ignore
  self.found = found;
// @ts-ignore
  self.location = location;
// @ts-ignore
  self.name = "SyntaxError";
// @ts-ignore
  return self;
}

// @ts-ignore
peg$subclass(peg$SyntaxError, Error);

// @ts-ignore
function peg$padEnd(str, targetLength, padString) {
// @ts-ignore
  padString = padString || " ";
// @ts-ignore
  if (str.length > targetLength) { return str; }
// @ts-ignore
  targetLength -= str.length;
// @ts-ignore
  padString += padString.repeat(targetLength);
// @ts-ignore
  return str + padString.slice(0, targetLength);
}

// @ts-ignore
peg$SyntaxError.prototype.format = function(sources) {
// @ts-ignore
  var str = "Error: " + this.message;
// @ts-ignore
  if (this.location) {
// @ts-ignore
    var src = null;
// @ts-ignore
    var k;
// @ts-ignore
    for (k = 0; k < sources.length; k++) {
// @ts-ignore
      if (sources[k].source === this.location.source) {
// @ts-ignore
        src = sources[k].text.split(/\r\n|\n|\r/g);
// @ts-ignore
        break;
      }
    }
// @ts-ignore
    var s = this.location.start;
// @ts-ignore
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
// @ts-ignore
      ? this.location.source.offset(s)
// @ts-ignore
      : s;
// @ts-ignore
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
// @ts-ignore
    if (src) {
// @ts-ignore
      var e = this.location.end;
// @ts-ignore
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
// @ts-ignore
      var line = src[s.line - 1];
// @ts-ignore
      var last = s.line === e.line ? e.column : line.length + 1;
// @ts-ignore
      var hatLen = (last - s.column) || 1;
// @ts-ignore
      str += "\n --> " + loc + "\n"
// @ts-ignore
          + filler + " |\n"
// @ts-ignore
          + offset_s.line + " | " + line + "\n"
// @ts-ignore
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
// @ts-ignore
          + peg$padEnd("", hatLen, "^");
// @ts-ignore
    } else {
// @ts-ignore
      str += "\n at " + loc;
    }
  }
// @ts-ignore
  return str;
};

// @ts-ignore
peg$SyntaxError.buildMessage = function(expected, found) {
// @ts-ignore
  var DESCRIBE_EXPECTATION_FNS = {
// @ts-ignore
    literal: function(expectation) {
// @ts-ignore
      return "\"" + literalEscape(expectation.text) + "\"";
    },

// @ts-ignore
    class: function(expectation) {
// @ts-ignore
      var escapedParts = expectation.parts.map(function(part) {
// @ts-ignore
        return Array.isArray(part)
// @ts-ignore
          ? classEscape(part[0]) + "-" + classEscape(part[1])
// @ts-ignore
          : classEscape(part);
      });

// @ts-ignore
      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

// @ts-ignore
    any: function() {
// @ts-ignore
      return "any character";
    },

// @ts-ignore
    end: function() {
// @ts-ignore
      return "end of input";
    },

// @ts-ignore
    other: function(expectation) {
// @ts-ignore
      return expectation.description;
    }
  };

// @ts-ignore
  function hex(ch) {
// @ts-ignore
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

// @ts-ignore
  function literalEscape(s) {
// @ts-ignore
    return s
// @ts-ignore
      .replace(/\\/g, "\\\\")
// @ts-ignore
      .replace(/"/g,  "\\\"")
// @ts-ignore
      .replace(/\0/g, "\\0")
// @ts-ignore
      .replace(/\t/g, "\\t")
// @ts-ignore
      .replace(/\n/g, "\\n")
// @ts-ignore
      .replace(/\r/g, "\\r")
// @ts-ignore
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
// @ts-ignore
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

// @ts-ignore
  function classEscape(s) {
// @ts-ignore
    return s
// @ts-ignore
      .replace(/\\/g, "\\\\")
// @ts-ignore
      .replace(/\]/g, "\\]")
// @ts-ignore
      .replace(/\^/g, "\\^")
// @ts-ignore
      .replace(/-/g,  "\\-")
// @ts-ignore
      .replace(/\0/g, "\\0")
// @ts-ignore
      .replace(/\t/g, "\\t")
// @ts-ignore
      .replace(/\n/g, "\\n")
// @ts-ignore
      .replace(/\r/g, "\\r")
// @ts-ignore
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
// @ts-ignore
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

// @ts-ignore
  function describeExpectation(expectation) {
// @ts-ignore
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

// @ts-ignore
  function describeExpected(expected) {
// @ts-ignore
    var descriptions = expected.map(describeExpectation);
// @ts-ignore
    var i, j;

// @ts-ignore
    descriptions.sort();

// @ts-ignore
    if (descriptions.length > 0) {
// @ts-ignore
      for (i = 1, j = 1; i < descriptions.length; i++) {
// @ts-ignore
        if (descriptions[i - 1] !== descriptions[i]) {
// @ts-ignore
          descriptions[j] = descriptions[i];
// @ts-ignore
          j++;
        }
      }
// @ts-ignore
      descriptions.length = j;
    }

// @ts-ignore
    switch (descriptions.length) {
// @ts-ignore
      case 1:
// @ts-ignore
        return descriptions[0];

// @ts-ignore
      case 2:
// @ts-ignore
        return descriptions[0] + " or " + descriptions[1];

// @ts-ignore
      default:
// @ts-ignore
        return descriptions.slice(0, -1).join(", ")
// @ts-ignore
          + ", or "
// @ts-ignore
          + descriptions[descriptions.length - 1];
    }
  }

// @ts-ignore
  function describeFound(found) {
// @ts-ignore
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

// @ts-ignore
  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

// @ts-ignore
function peg$parse(input, options) {
// @ts-ignore
  options = options !== undefined ? options : {};

// @ts-ignore
  var peg$FAILED = {};
// @ts-ignore
  var peg$source = options.grammarSource;

// @ts-ignore
  var peg$startRuleFunctions = { start: peg$parsestart, expr: peg$parseexpr, statement: peg$parsestatement, block: peg$parseblock, funcDecl: peg$parsefuncDecl, structDecl: peg$parsestructDecl, enumDecl: peg$parseenumDecl, typeExpr: peg$parsetypeExpr };
// @ts-ignore
  var peg$startRuleFunction = peg$parsestart;

// @ts-ignore
  var peg$c0 = "module";
  var peg$c1 = "{";
  var peg$c2 = "}";
  var peg$c3 = "global";
  var peg$c4 = ";";
  var peg$c5 = "import";
  var peg$c6 = "from";
  var peg$c7 = "let";
  var peg$c8 = "reg";
  var peg$c9 = "return";
  var peg$c10 = ":";
  var peg$c11 = "=";
  var peg$c12 = "while";
  var peg$c13 = "(";
  var peg$c14 = ")";
  var peg$c15 = "if";
  var peg$c16 = "else";
  var peg$c17 = "extern";
  var peg$c18 = "struct";
  var peg$c19 = "enum";
  var peg$c20 = ",";
  var peg$c21 = "pub";
  var peg$c22 = "func";
  var peg$c23 = "&";
  var peg$c24 = "[";
  var peg$c25 = "]";
  var peg$c26 = "||";
  var peg$c27 = "&&";
  var peg$c28 = "==";
  var peg$c29 = "!=";
  var peg$c30 = "<=";
  var peg$c31 = ">=";
  var peg$c32 = "<";
  var peg$c33 = ">";
  var peg$c34 = "+";
  var peg$c35 = "-";
  var peg$c36 = "*";
  var peg$c37 = "/";
  var peg$c38 = "%";
  var peg$c39 = "!";
  var peg$c40 = "as";
  var peg$c41 = "@";
  var peg$c42 = "$";
  var peg$c43 = ".";
  var peg$c44 = "::";
  var peg$c45 = "\"";
  var peg$c46 = "\\";
  var peg$c47 = "'";
  var peg$c48 = "_";
  var peg$c49 = "i";
  var peg$c50 = "u";
  var peg$c51 = "8";
  var peg$c52 = "16";
  var peg$c53 = "32";
  var peg$c54 = "64";
  var peg$c55 = "f";
  var peg$c56 = "true";
  var peg$c57 = "false";
  var peg$c58 = "//";

  var peg$r0 = /^[^"]/;
  var peg$r1 = /^[0-9]/;
  var peg$r2 = /^[a-z_]/i;
  var peg$r3 = /^[a-z0-9_]/i;
  var peg$r4 = /^[ \n\t\r]/;
  var peg$r5 = /^[^\n]/;

  var peg$e0 = peg$literalExpectation("module", false);
  var peg$e1 = peg$literalExpectation("{", false);
  var peg$e2 = peg$literalExpectation("}", false);
  var peg$e3 = peg$literalExpectation("global", false);
  var peg$e4 = peg$literalExpectation(";", false);
  var peg$e5 = peg$literalExpectation("import", false);
  var peg$e6 = peg$literalExpectation("from", false);
  var peg$e7 = peg$literalExpectation("let", false);
  var peg$e8 = peg$literalExpectation("reg", false);
  var peg$e9 = peg$literalExpectation("return", false);
  var peg$e10 = peg$literalExpectation(":", false);
  var peg$e11 = peg$literalExpectation("=", false);
  var peg$e12 = peg$literalExpectation("while", false);
  var peg$e13 = peg$literalExpectation("(", false);
  var peg$e14 = peg$literalExpectation(")", false);
  var peg$e15 = peg$literalExpectation("if", false);
  var peg$e16 = peg$literalExpectation("else", false);
  var peg$e17 = peg$literalExpectation("extern", false);
  var peg$e18 = peg$literalExpectation("struct", false);
  var peg$e19 = peg$literalExpectation("enum", false);
  var peg$e20 = peg$literalExpectation(",", false);
  var peg$e21 = peg$literalExpectation("pub", false);
  var peg$e22 = peg$literalExpectation("func", false);
  var peg$e23 = peg$literalExpectation("&", false);
  var peg$e24 = peg$literalExpectation("[", false);
  var peg$e25 = peg$literalExpectation("]", false);
  var peg$e26 = peg$literalExpectation("||", false);
  var peg$e27 = peg$literalExpectation("&&", false);
  var peg$e28 = peg$literalExpectation("==", false);
  var peg$e29 = peg$literalExpectation("!=", false);
  var peg$e30 = peg$literalExpectation("<=", false);
  var peg$e31 = peg$literalExpectation(">=", false);
  var peg$e32 = peg$literalExpectation("<", false);
  var peg$e33 = peg$literalExpectation(">", false);
  var peg$e34 = peg$literalExpectation("+", false);
  var peg$e35 = peg$literalExpectation("-", false);
  var peg$e36 = peg$literalExpectation("*", false);
  var peg$e37 = peg$literalExpectation("/", false);
  var peg$e38 = peg$literalExpectation("%", false);
  var peg$e39 = peg$literalExpectation("!", false);
  var peg$e40 = peg$literalExpectation("as", false);
  var peg$e41 = peg$literalExpectation("@", false);
  var peg$e42 = peg$literalExpectation("$", false);
  var peg$e43 = peg$literalExpectation(".", false);
  var peg$e44 = peg$literalExpectation("::", false);
  var peg$e45 = peg$literalExpectation("\"", false);
  var peg$e46 = peg$literalExpectation("\\", false);
  var peg$e47 = peg$anyExpectation();
  var peg$e48 = peg$classExpectation(["\""], true, false);
  var peg$e49 = peg$literalExpectation("'", false);
  var peg$e50 = peg$literalExpectation("_", false);
  var peg$e51 = peg$literalExpectation("i", false);
  var peg$e52 = peg$literalExpectation("u", false);
  var peg$e53 = peg$literalExpectation("8", false);
  var peg$e54 = peg$literalExpectation("16", false);
  var peg$e55 = peg$literalExpectation("32", false);
  var peg$e56 = peg$literalExpectation("64", false);
  var peg$e57 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e58 = peg$literalExpectation("f", false);
  var peg$e59 = peg$literalExpectation("true", false);
  var peg$e60 = peg$literalExpectation("false", false);
  var peg$e61 = peg$otherExpectation("identifier");
  var peg$e62 = peg$classExpectation([["a", "z"], "_"], false, true);
  var peg$e63 = peg$classExpectation([["a", "z"], ["0", "9"], "_"], false, true);
  var peg$e64 = peg$otherExpectation("whitespace");
  var peg$e65 = peg$classExpectation([" ", "\n", "\t", "\r"], false, false);
  var peg$e66 = peg$literalExpectation("//", false);
  var peg$e67 = peg$classExpectation(["\n"], true, false);
// @ts-ignore

  var peg$f0 = function(statements) {
// @ts-ignore
    let decls = [];
// @ts-ignore
    let mainFuncBody = [];
// @ts-ignore
    let hasMainFunc = false;
// @ts-ignore
    for (const statement of statements??[]) {
// @ts-ignore
      if (spec.isFuncDecl(statement)) {
// @ts-ignore
        if (statement.fields.symbol === "main") {
// @ts-ignore
          hasMainFunc = true;
        }
// @ts-ignore
        decls.push(statement);
// @ts-ignore
      } else if (spec.isStatement(statement)) {
// @ts-ignore
        mainFuncBody.push(statement);
// @ts-ignore
      } else {
// @ts-ignore
        decls.push(statement);
      }
    }
// @ts-ignore
    if (mainFuncBody.length > 0) {
// @ts-ignore
      let lastStatement = mainFuncBody[mainFuncBody.length-1];
// @ts-ignore
      if (spec.isExprStatement(lastStatement)) {
// @ts-ignore
        const returnStatement = spec.makeReturnStatement(
// @ts-ignore
          lastStatement.fields.expr
        )
// @ts-ignore
        returnStatement.location = lastStatement.fields.expr.location;
// @ts-ignore
        mainFuncBody[mainFuncBody.length-1] = returnStatement;
      }
    }
// @ts-ignore
    if (!hasMainFunc) {
// @ts-ignore
      if (mainFuncBody.length > 0) {
// @ts-ignore
        decls.push(
// @ts-ignore
          spec.makeFuncDeclWith({
// @ts-ignore
            symbol:'main',
// @ts-ignore
            isPublic: false,
// @ts-ignore
            parameters: spec.makeParameterList([]),
// @ts-ignore
            body: spec.makeBlock(mainFuncBody)
          })
        );
      }
// @ts-ignore
    } else if (mainFuncBody.length > 0 ) {
// @ts-ignore
      throw new Error('Both free statements and a main function were provided. Choose one or the other');
    }
// @ts-ignore
    return spec.makeFileWith({
// @ts-ignore
      decls,
    });
  };// @ts-ignore

  var peg$f1 = function(head, tail) {
// @ts-ignore
    return [head, ...tail.map((t:any)=>t[1])];
  };// @ts-ignore

  var peg$f2 = function(symbol, decls) {
// @ts-ignore
    return spec.makeModuleDeclWith({symbol, decls});
  };// @ts-ignore

  var peg$f3 = function(head, tail) {
// @ts-ignore
    return [head, ...tail.map((t:any)=>t[1])];
  };// @ts-ignore

  var peg$f4 = function(varDecl) {
// @ts-ignore
    return spec.makeGlobalDecl(varDecl.name, varDecl.type, varDecl.expr)
  };// @ts-ignore

  var peg$f5 = function(symbol, path) {
// @ts-ignore
    return spec.makeImportDecl(symbol, path);
  };// @ts-ignore

  var peg$f6 = function(head, tail) {
// @ts-ignore
    return spec.makeBlock([
// @ts-ignore
      head,
// @ts-ignore
      ...tail.map((els:any[]) => els[1])
    ]);
  };// @ts-ignore

  var peg$f7 = function(varDecl) {
// @ts-ignore
    return spec.makeLetStatement(varDecl.name, varDecl.type, varDecl.expr);
  };// @ts-ignore

  var peg$f8 = function(varDecl) {
// @ts-ignore
    return spec.makeRegStatement(varDecl.name, varDecl.type, varDecl.expr);
  };// @ts-ignore

  var peg$f9 = function(expr) {
// @ts-ignore
    return spec.makeReturnStatement(expr);
  };// @ts-ignore

  var peg$f10 = function(block) {// @ts-ignore
 return block; };// @ts-ignore

  var peg$f11 = function(expr) {
// @ts-ignore
    return spec.makeExprStatement(expr);
  };// @ts-ignore

  var peg$f12 = function(name, type, initializer) {
// @ts-ignore
    return {
// @ts-ignore
      name,
// @ts-ignore
      type:type ? type[2] : undefined,
// @ts-ignore
      expr: initializer ? initializer[3] : undefined
    };
  };// @ts-ignore

  var peg$f13 = function(condExpr, thenBlock) {
// @ts-ignore
      return spec.makeWhileStatement(
// @ts-ignore
        condExpr,
// @ts-ignore
        thenBlock || spec.makeBlock([])
      );
    };// @ts-ignore

  var peg$f14 = function(condExpr, thenBlock, elseBlock) {
// @ts-ignore
    return spec.makeIfStatement(
// @ts-ignore
      condExpr,
// @ts-ignore
      thenBlock,
// @ts-ignore
      elseBlock ? elseBlock[4] : spec.makeBlock([])
    );
  };// @ts-ignore

  var peg$f15 = function(name, decls) {
// @ts-ignore
  return spec.makeExternDeclWith({
// @ts-ignore
    libName: name,
// @ts-ignore
    funcs: decls.map((begin:any) => {
// @ts-ignore
      return spec.makeExternFuncDecl(
// @ts-ignore
        begin.name,
// @ts-ignore
        begin.parameters,
// @ts-ignore
        begin.returnType,
      );
    })
  });
};// @ts-ignore

  var peg$f16 = function(head, tail) {
// @ts-ignore
  return [head, ...tail.map((p:any[])=> p[1])];
};// @ts-ignore

  var peg$f17 = function(structName, types) {
// @ts-ignore
    return spec.makeTupleStructDecl(structName, types);
  };// @ts-ignore

  var peg$f18 = function(structName, props) {
// @ts-ignore
    return spec.makeStructDeclWith({
// @ts-ignore
      symbol: structName,
// @ts-ignore
      props: props || [],
    })
  };// @ts-ignore

  var peg$f19 = function(head, tail) {
// @ts-ignore
    return [head, ...tail.map((p:any[]) => p[1])]
  };// @ts-ignore

  var peg$f20 = function(name, type) {
// @ts-ignore
    return spec.makeStructProp(name, type);
  };// @ts-ignore

  var peg$f21 = function(enumName, tags) {
// @ts-ignore
    return spec.makeEnumDeclWith({
// @ts-ignore
      symbol: enumName,
// @ts-ignore
      tags: tags || [],
    })
  };// @ts-ignore

  var peg$f22 = function(head, tail) {
// @ts-ignore
    return [head, ...tail.map((p:any[]) => p[1])]
  };// @ts-ignore

  var peg$f23 = function(tagName, type) {
// @ts-ignore
    return spec.makeEnumTagWith({
// @ts-ignore
      symbol: tagName,
// @ts-ignore
      typeExpr: type ? type[2] : undefined
    });
  };// @ts-ignore

  var peg$f24 = function(head, tail) {
// @ts-ignore
  return [head, ...tail.map((p:any[]) => p[3])];
};// @ts-ignore

  var peg$f25 = function(pubFlag, begin, body) {
// @ts-ignore
    return spec.makeFuncDeclWith({
// @ts-ignore
      symbol: begin.name,
// @ts-ignore
      isPublic: Boolean(pubFlag),
// @ts-ignore
      parameters: begin.parameters,
// @ts-ignore
      returnType: begin.returnType,
// @ts-ignore
      body: body || spec.makeBlock([]),
    });
  };// @ts-ignore

  var peg$f26 = function(name, parameters, returns) {
// @ts-ignore
  return {
// @ts-ignore
    name,
// @ts-ignore
    parameters: parameters || spec.makeParameterList([]),
// @ts-ignore
    returnType: returns ? returns[2] : undefined,
  };
};// @ts-ignore

  var peg$f27 = function(head, tail) {
// @ts-ignore
    return spec.makeParameterList([head, ...tail.map((p:any[]) => p[3])])
  };// @ts-ignore

  var peg$f28 = function(name, type) {
// @ts-ignore
    return spec.makeParameter(name, type);
  };// @ts-ignore

  var peg$f29 = function(expr) {// @ts-ignore
 return spec.makePointerTypeExpr(expr); };// @ts-ignore

  var peg$f30 = function(valueTypeExpr, size) {
// @ts-ignore
    return spec.makeArrayTypeExpr(valueTypeExpr, size);
  };// @ts-ignore

  var peg$f31 = function(name) {// @ts-ignore
 return spec.makeTypeRef(name); };// @ts-ignore

  var peg$f32 = function(val, rest) {
// @ts-ignore
    return rightAssoc(
// @ts-ignore
      val,
// @ts-ignore
      rest,
// @ts-ignore
      ({left, right}) => spec.makeBinaryExpr(AST.BinOp.ASSIGN, left, right)
    );
  };// @ts-ignore

  var peg$f33 = function(rest, val) {
// @ts-ignore
    return leftAssoc(
// @ts-ignore
      rest,
// @ts-ignore
      val,
// @ts-ignore
      ({left, right}) => spec.makeBinaryExpr(AST.BinOp.LOGICAL_OR, left, right)
    );
  };// @ts-ignore

  var peg$f34 = function(rest, val) {
// @ts-ignore
    return leftAssoc(
// @ts-ignore
      rest,
// @ts-ignore
      val,
// @ts-ignore
      ({left, right}) => spec.makeBinaryExpr(AST.BinOp.LOGICAL_AND, left, right)
    );
  };// @ts-ignore

  var peg$f35 = function(rest, val) {
// @ts-ignore
    return leftAssoc(
// @ts-ignore
      rest,
// @ts-ignore
      val,
// @ts-ignore
      ({left, right, operator}) => spec.makeBinaryExpr(
// @ts-ignore
        operator === "!=" ? AST.BinOp.NOT_EQUAL_TO : AST.BinOp.EQUAL_TO,
// @ts-ignore
        left,
// @ts-ignore
        right
      )
    );
  };// @ts-ignore

  var peg$f36 = function(rest, val) {
// @ts-ignore
    return leftAssoc(
// @ts-ignore
      rest,
// @ts-ignore
      val,
// @ts-ignore
      ({left, right, operator}) => spec.makeBinaryExpr(
// @ts-ignore
        operator[0] === "<" ? (
// @ts-ignore
          operator.length > 1 ? AST.BinOp.LESS_THAN_OR_EQ : AST.BinOp.LESS_THAN
         ) : (
// @ts-ignore
          operator.length > 1 ? AST.BinOp.GREATER_THAN_OR_EQ : AST.BinOp.GREATER_THAN
        ),
// @ts-ignore
        left,
// @ts-ignore
        right
      )
    );
  };// @ts-ignore

  var peg$f37 = function(rest, val) {
// @ts-ignore
    return leftAssoc(
// @ts-ignore
      rest,
// @ts-ignore
      val,
// @ts-ignore
      ({left, right, operator}) => spec.makeBinaryExpr(
// @ts-ignore
        operator === "+" ? AST.BinOp.ADD : AST.BinOp.SUB,
// @ts-ignore
        left,
// @ts-ignore
        right
      )
    );
  };// @ts-ignore

  var peg$f38 = function(rest, val) {
// @ts-ignore
    const opMap:{[s:string]: AST.BinOp} = {
// @ts-ignore
      "*": AST.BinOp.MUL,
// @ts-ignore
      "/": AST.BinOp.DIV,
// @ts-ignore
      "%": AST.BinOp.REM,
    };

// @ts-ignore
    return leftAssoc(
// @ts-ignore
      rest,
// @ts-ignore
      val,
// @ts-ignore
      ({left, right, operator}) => {
        
// @ts-ignore
        return spec.makeBinaryExpr(
// @ts-ignore
          opMap[operator],
// @ts-ignore
          left,
// @ts-ignore
          right
        );
      }
    );
  };// @ts-ignore

  var peg$f39 = function(expr) {
// @ts-ignore
    return spec.makeUnaryExpr(AST.UnaryOp.NEG, expr);
  };// @ts-ignore

  var peg$f40 = function(expr) {
// @ts-ignore
    return spec.makeUnaryExpr(AST.UnaryOp.LOGICAL_NOT, expr);
  };// @ts-ignore

  var peg$f41 = function(expr, force, typeExpr) {
// @ts-ignore
    return spec.makeCastExprWith({
// @ts-ignore
      expr,
// @ts-ignore
      typeExpr,
// @ts-ignore
      force: Boolean(force),
    });
  };// @ts-ignore

  var peg$f42 = function(expr) {
// @ts-ignore
    return spec.makeUnaryExpr(AST.UnaryOp.ADDR_OF, expr);
  };// @ts-ignore

  var peg$f43 = function(id, argList) {
// @ts-ignore
    return spec.makeCompilerCallExpr(id, spec.makeArgList(argList || []));
  };// @ts-ignore

  var peg$f44 = function(funcExpr, argList) {
// @ts-ignore
    return spec.makeCallExpr(funcExpr, spec.makeArgList(argList || []));
  };// @ts-ignore

  var peg$f45 = function(element, rest) {
// @ts-ignore
    function build(val:any, rest:any[]):any {
// @ts-ignore
      if (rest.length === 0) {
// @ts-ignore
        return val;
      }
// @ts-ignore
      const first = rest.shift()
// @ts-ignore
      return build(
// @ts-ignore
        spec.makeBinaryExpr(AST.BinOp.ARRAY_INDEX, val, first[3]),
// @ts-ignore
        rest
      )
    }
// @ts-ignore
    return build(element, rest);
  };// @ts-ignore

  var peg$f46 = function(rest, val) {
// @ts-ignore
    return leftAssoc(
// @ts-ignore
      rest,
// @ts-ignore
      val,
// @ts-ignore
      ({left, right, operator}) => spec.makeMemberAccessExpr(left, right)
    );
  };// @ts-ignore

  var peg$f47 = function(inner) {// @ts-ignore
 return inner; };// @ts-ignore

  var peg$f48 = function(structName, values) {
// @ts-ignore
    return spec.makeStructLiteral(structName, values || []);
  };// @ts-ignore

  var peg$f49 = function(structName, values) {
// @ts-ignore
    values = values ?? [];
// @ts-ignore
    return spec.makeStructLiteral(
// @ts-ignore
      structName,
// @ts-ignore
      values.map((expr:any, i:number) => spec.makeStructLiteralProp(String(i), expr))
    );
  };// @ts-ignore

  var peg$f50 = function(head, tail) {
// @ts-ignore
    return [head, ...tail.map((t:any[]) => t[3])];
  };// @ts-ignore

  var peg$f51 = function(propName, expr) {
// @ts-ignore
    return spec.makeStructLiteralProp(propName, expr);
  };// @ts-ignore

  var peg$f52 = function(value) {
// @ts-ignore
    return spec.makeStringLiteral(value);
  };// @ts-ignore

  var peg$f53 = function(content) {
// @ts-ignore
    const inner = content.map((c:any) => typeof c === "string" ? c : c.join('')).join('');
// @ts-ignore
    return JSON.parse('"'+inner+'"');
  };// @ts-ignore

  var peg$f54 = function(content) {
// @ts-ignore
    let s = (content[0] || '') + content[1];
// @ts-ignore
    if (s === "\\'") {
// @ts-ignore
      s = "'";
// @ts-ignore
    } else if (s === '"') {
// @ts-ignore
      s = '\\"';
    }
// @ts-ignore
    return spec.makeCharLiteral(JSON.parse('"'+s+'"').charCodeAt(0));
  };// @ts-ignore

  var peg$f55 = function(value, size) {
// @ts-ignore
    return spec.makeArrayLiteralWith({elements:[value], size});
  };// @ts-ignore

  var peg$f56 = function(items) {
// @ts-ignore
    return spec.makeArrayLiteralWith({elements:items || []});
  };// @ts-ignore

  var peg$f57 = function(head, tail) {// @ts-ignore
 return [head, ...tail.map((t:any[])=>t[3])]; };// @ts-ignore

  var peg$f58 = function(digits, type) {
// @ts-ignore
    return spec.makeNumberLiteral(
// @ts-ignore
      digits,
// @ts-ignore
      AST.NumberLiteralType.Integer,
// @ts-ignore
      type? type.slice(1).join('') : undefined
    );
  };// @ts-ignore

  var peg$f59 = function(digits) {// @ts-ignore
 return parseInt(digits.join('')); };// @ts-ignore

  var peg$f60 = function(leftDigits, rightDigits, type) {
// @ts-ignore
    return spec.makeNumberLiteral(
// @ts-ignore
      parseFloat(leftDigits.join('') + '.' + rightDigits.join('')),
// @ts-ignore
      AST.NumberLiteralType.Float,
// @ts-ignore
      type? type.slice(1).join('') : undefined
    )
  };// @ts-ignore

  var peg$f61 = function() {// @ts-ignore
 return spec.makeBooleanLiteral(true); };// @ts-ignore

  var peg$f62 = function() {// @ts-ignore
 return spec.makeBooleanLiteral(false); };// @ts-ignore

  var peg$f63 = function(name, rest) {
// @ts-ignore
    return spec.makeNamespacedRef([name, ...rest.map((r:any) => r[1])]);
  };// @ts-ignore

  var peg$f64 = function(name) {
// @ts-ignore
    return spec.makeSymbolRef(name);
  };// @ts-ignore

  var peg$f65 = function(prefix, suffix) {// @ts-ignore
 return prefix+suffix.join(''); };
// @ts-ignore
  var peg$currPos = 0;
// @ts-ignore
  var peg$savedPos = 0;
// @ts-ignore
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
// @ts-ignore
  var peg$maxFailPos = 0;
// @ts-ignore
  var peg$maxFailExpected = [];
// @ts-ignore
  var peg$silentFails = 0;

// @ts-ignore
  var peg$resultsCache = {};

// @ts-ignore
  var peg$result;

// @ts-ignore
  if ("startRule" in options) {
// @ts-ignore
    if (!(options.startRule in peg$startRuleFunctions)) {
// @ts-ignore
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

// @ts-ignore
    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

// @ts-ignore
  function text() {
// @ts-ignore
    return input.substring(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function offset() {
// @ts-ignore
    return peg$savedPos;
  }

// @ts-ignore
  function range() {
// @ts-ignore
    return {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: peg$savedPos,
// @ts-ignore
      end: peg$currPos
    };
  }

// @ts-ignore
  function location() {
// @ts-ignore
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function expected(description, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      [peg$otherExpectation(description)],
// @ts-ignore
      input.substring(peg$savedPos, peg$currPos),
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function error(message, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildSimpleError(message, location);
  }

// @ts-ignore
  function peg$literalExpectation(text, ignoreCase) {
// @ts-ignore
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

// @ts-ignore
  function peg$classExpectation(parts, inverted, ignoreCase) {
// @ts-ignore
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

// @ts-ignore
  function peg$anyExpectation() {
// @ts-ignore
    return { type: "any" };
  }

// @ts-ignore
  function peg$endExpectation() {
// @ts-ignore
    return { type: "end" };
  }

// @ts-ignore
  function peg$otherExpectation(description) {
// @ts-ignore
    return { type: "other", description: description };
  }

// @ts-ignore
  function peg$computePosDetails(pos) {
// @ts-ignore
    var details = peg$posDetailsCache[pos];
// @ts-ignore
    var p;

// @ts-ignore
    if (details) {
// @ts-ignore
      return details;
// @ts-ignore
    } else {
// @ts-ignore
      p = pos - 1;
// @ts-ignore
      while (!peg$posDetailsCache[p]) {
// @ts-ignore
        p--;
      }

// @ts-ignore
      details = peg$posDetailsCache[p];
// @ts-ignore
      details = {
// @ts-ignore
        line: details.line,
// @ts-ignore
        column: details.column
      };

// @ts-ignore
      while (p < pos) {
// @ts-ignore
        if (input.charCodeAt(p) === 10) {
// @ts-ignore
          details.line++;
// @ts-ignore
          details.column = 1;
// @ts-ignore
        } else {
// @ts-ignore
          details.column++;
        }

// @ts-ignore
        p++;
      }

// @ts-ignore
      peg$posDetailsCache[pos] = details;

// @ts-ignore
      return details;
    }
  }

// @ts-ignore
  function peg$computeLocation(startPos, endPos, offset) {
// @ts-ignore
    var startPosDetails = peg$computePosDetails(startPos);
// @ts-ignore
    var endPosDetails = peg$computePosDetails(endPos);

// @ts-ignore
    var res = {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: {
// @ts-ignore
        offset: startPos,
// @ts-ignore
        line: startPosDetails.line,
// @ts-ignore
        column: startPosDetails.column
      },
// @ts-ignore
      end: {
// @ts-ignore
        offset: endPos,
// @ts-ignore
        line: endPosDetails.line,
// @ts-ignore
        column: endPosDetails.column
      }
    };
// @ts-ignore
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
// @ts-ignore
      res.start = peg$source.offset(res.start);
// @ts-ignore
      res.end = peg$source.offset(res.end);
    }
// @ts-ignore
    return res;
  }

// @ts-ignore
  function peg$fail(expected) {
// @ts-ignore
    if (peg$currPos < peg$maxFailPos) { return; }

// @ts-ignore
    if (peg$currPos > peg$maxFailPos) {
// @ts-ignore
      peg$maxFailPos = peg$currPos;
// @ts-ignore
      peg$maxFailExpected = [];
    }

// @ts-ignore
    peg$maxFailExpected.push(expected);
  }

// @ts-ignore
  function peg$buildSimpleError(message, location) {
// @ts-ignore
    return new peg$SyntaxError(message, null, null, location);
  }

// @ts-ignore
  function peg$buildStructuredError(expected, found, location) {
// @ts-ignore
    return new peg$SyntaxError(
// @ts-ignore
      peg$SyntaxError.buildMessage(expected, found),
// @ts-ignore
      expected,
// @ts-ignore
      found,
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestart() {
// @ts-ignore
    var s0;

// @ts-ignore
    var key = peg$currPos * 59 + 0;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$parsefile();

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsefile() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    var key = peg$currPos * 59 + 1;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsews();
// @ts-ignore
    s2 = peg$parsefileStatementList();
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s2 = null;
    }
// @ts-ignore
    s3 = peg$parsews();
// @ts-ignore
    peg$savedPos = s0;
// @ts-ignore
    s0 = peg$f0(s2);

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsefileStatementList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    var key = peg$currPos * 59 + 2;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsefileStatement();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parsews();
// @ts-ignore
      s5 = peg$parsefileStatement();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s4 = [s4, s5];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        s5 = peg$parsefileStatement();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f1(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsefileStatement() {
// @ts-ignore
    var s0;

// @ts-ignore
    var key = peg$currPos * 59 + 3;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$parsemoduleStatement();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsestatement();
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsemoduleDecl() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    var key = peg$currPos * 59 + 4;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c0) {
// @ts-ignore
      s1 = peg$c0;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsews();
// @ts-ignore
      s3 = peg$parseidentifier();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
          s5 = peg$c1;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          s7 = peg$parsemoduleDeclList();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parsews();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
              s9 = peg$c2;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f2(s3, s7);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsemoduleDeclList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    var key = peg$currPos * 59 + 5;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsemoduleStatement();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parsews();
// @ts-ignore
      s5 = peg$parsemoduleStatement();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s4 = [s4, s5];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        s5 = peg$parsemoduleStatement();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f3(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsemoduleStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    var key = peg$currPos * 59 + 6;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c3) {
// @ts-ignore
      s1 = peg$c3;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsews();
// @ts-ignore
      s3 = peg$parsevarDecl();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
          s5 = peg$c4;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f4(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 6) === peg$c5) {
// @ts-ignore
        s1 = peg$c5;
// @ts-ignore
        peg$currPos += 6;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parsews();
// @ts-ignore
        s3 = peg$parseidentifier();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parsews();
// @ts-ignore
          if (input.substr(peg$currPos, 4) === peg$c6) {
// @ts-ignore
            s5 = peg$c6;
// @ts-ignore
            peg$currPos += 4;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e6); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parsews();
// @ts-ignore
            s7 = peg$parsequotedString();
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f5(s3, s7);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parsefuncDecl();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseexternDecl();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parsestructDecl();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parseenumDecl();
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$parsemoduleDecl();
              }
            }
          }
        }
      }
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseblock() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    var key = peg$currPos * 59 + 7;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsews();
// @ts-ignore
    s2 = peg$parsestatement();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$parsews();
// @ts-ignore
      s6 = peg$parsestatement();
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s5 = [s5, s6];
// @ts-ignore
        s4 = s5;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$parsews();
// @ts-ignore
        s6 = peg$parsestatement();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      s4 = peg$parsews();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f6(s2, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    var key = peg$currPos * 59 + 8;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c7) {
// @ts-ignore
      s1 = peg$c7;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsews();
// @ts-ignore
      s3 = peg$parsevarDecl();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
          s5 = peg$c4;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f7(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 3) === peg$c8) {
// @ts-ignore
        s1 = peg$c8;
// @ts-ignore
        peg$currPos += 3;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parsews();
// @ts-ignore
        s3 = peg$parsevarDecl();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parsews();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
            s5 = peg$c4;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parsews();
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f8(s3);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseifStatement();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parsewhileStatement();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$currPos;
// @ts-ignore
            if (input.substr(peg$currPos, 6) === peg$c9) {
// @ts-ignore
              s1 = peg$c9;
// @ts-ignore
              peg$currPos += 6;
// @ts-ignore
            } else {
// @ts-ignore
              s1 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e9); }
            }
// @ts-ignore
            if (s1 !== peg$FAILED) {
// @ts-ignore
              s2 = peg$parsews();
// @ts-ignore
              s3 = peg$parseassignment();
// @ts-ignore
              if (s3 === peg$FAILED) {
// @ts-ignore
                s3 = null;
              }
// @ts-ignore
              s4 = peg$parsews();
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
                s5 = peg$c4;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s5 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e4); }
              }
// @ts-ignore
              if (s5 !== peg$FAILED) {
// @ts-ignore
                s6 = peg$parsews();
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f9(s3);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$currPos;
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
                s1 = peg$c1;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s1 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e1); }
              }
// @ts-ignore
              if (s1 !== peg$FAILED) {
// @ts-ignore
                s2 = peg$parsews();
// @ts-ignore
                s3 = peg$parseblock();
// @ts-ignore
                if (s3 !== peg$FAILED) {
// @ts-ignore
                  s4 = peg$parsews();
// @ts-ignore
                  if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
                    s5 = peg$c2;
// @ts-ignore
                    peg$currPos++;
// @ts-ignore
                  } else {
// @ts-ignore
                    s5 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e2); }
                  }
// @ts-ignore
                  if (s5 !== peg$FAILED) {
// @ts-ignore
                    s6 = peg$parsews();
// @ts-ignore
                    peg$savedPos = s0;
// @ts-ignore
                    s0 = peg$f10(s3);
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$currPos;
// @ts-ignore
                s1 = peg$parseassignment();
// @ts-ignore
                if (s1 !== peg$FAILED) {
// @ts-ignore
                  s2 = peg$parsews();
// @ts-ignore
                  if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
                    s3 = peg$c4;
// @ts-ignore
                    peg$currPos++;
// @ts-ignore
                  } else {
// @ts-ignore
                    s3 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e4); }
                  }
// @ts-ignore
                  if (s3 !== peg$FAILED) {
// @ts-ignore
                    s4 = peg$parsews();
// @ts-ignore
                    peg$savedPos = s0;
// @ts-ignore
                    s0 = peg$f11(s1);
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsevarDecl() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    var key = peg$currPos * 59 + 9;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseidentifier();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsews();
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
        s4 = peg$c10;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parsews();
// @ts-ignore
        s6 = peg$parsetypeExpr();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$parsews();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
        s6 = peg$c11;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s7 = peg$parsews();
// @ts-ignore
        s8 = peg$parseassignment();
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6, s7, s8];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s4 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f12(s1, s3, s4);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsewhileStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

// @ts-ignore
    var key = peg$currPos * 59 + 10;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5) === peg$c12) {
// @ts-ignore
      s1 = peg$c12;
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsews();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
        s3 = peg$c13;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e13); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        s5 = peg$parseassignment();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
            s7 = peg$c14;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parsews();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
              s9 = peg$c1;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s10 = peg$parsews();
// @ts-ignore
              s11 = peg$parseblock();
// @ts-ignore
              if (s11 === peg$FAILED) {
// @ts-ignore
                s11 = null;
              }
// @ts-ignore
              s12 = peg$parsews();
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
                s13 = peg$c2;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s13 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e2); }
              }
// @ts-ignore
              if (s13 !== peg$FAILED) {
// @ts-ignore
                s14 = peg$parsews();
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f13(s5, s11);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseifStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23;

// @ts-ignore
    var key = peg$currPos * 59 + 11;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c15) {
// @ts-ignore
      s1 = peg$c15;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsews();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
        s3 = peg$c13;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e13); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        s5 = peg$parseassignment();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
            s7 = peg$c14;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parsews();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
              s9 = peg$c1;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s10 = peg$parsews();
// @ts-ignore
              s11 = peg$parseblock();
// @ts-ignore
              if (s11 !== peg$FAILED) {
// @ts-ignore
                s12 = peg$parsews();
// @ts-ignore
                if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
                  s13 = peg$c2;
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s13 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e2); }
                }
// @ts-ignore
                if (s13 !== peg$FAILED) {
// @ts-ignore
                  s14 = peg$parsews();
// @ts-ignore
                  s15 = peg$currPos;
// @ts-ignore
                  if (input.substr(peg$currPos, 4) === peg$c16) {
// @ts-ignore
                    s16 = peg$c16;
// @ts-ignore
                    peg$currPos += 4;
// @ts-ignore
                  } else {
// @ts-ignore
                    s16 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e16); }
                  }
// @ts-ignore
                  if (s16 !== peg$FAILED) {
// @ts-ignore
                    s17 = peg$parsews();
// @ts-ignore
                    if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
                      s18 = peg$c1;
// @ts-ignore
                      peg$currPos++;
// @ts-ignore
                    } else {
// @ts-ignore
                      s18 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e1); }
                    }
// @ts-ignore
                    if (s18 !== peg$FAILED) {
// @ts-ignore
                      s19 = peg$parsews();
// @ts-ignore
                      s20 = peg$parseblock();
// @ts-ignore
                      if (s20 !== peg$FAILED) {
// @ts-ignore
                        s21 = peg$parsews();
// @ts-ignore
                        if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
                          s22 = peg$c2;
// @ts-ignore
                          peg$currPos++;
// @ts-ignore
                        } else {
// @ts-ignore
                          s22 = peg$FAILED;
// @ts-ignore
                          if (peg$silentFails === 0) { peg$fail(peg$e2); }
                        }
// @ts-ignore
                        if (s22 !== peg$FAILED) {
// @ts-ignore
                          s23 = peg$parsews();
// @ts-ignore
                          s16 = [s16, s17, s18, s19, s20, s21, s22, s23];
// @ts-ignore
                          s15 = s16;
// @ts-ignore
                        } else {
// @ts-ignore
                          peg$currPos = s15;
// @ts-ignore
                          s15 = peg$FAILED;
                        }
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s15;
// @ts-ignore
                        s15 = peg$FAILED;
                      }
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s15;
// @ts-ignore
                      s15 = peg$FAILED;
                    }
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s15;
// @ts-ignore
                    s15 = peg$FAILED;
                  }
// @ts-ignore
                  if (s15 === peg$FAILED) {
// @ts-ignore
                    s15 = null;
                  }
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s0 = peg$f14(s5, s11, s15);
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseexternDecl() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    var key = peg$currPos * 59 + 12;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c17) {
// @ts-ignore
      s1 = peg$c17;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsews();
// @ts-ignore
      s3 = peg$parseidentifier();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
          s5 = peg$c1;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          s7 = peg$parseexternDeclList();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parsews();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
              s9 = peg$c2;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f15(s3, s7);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseexternDeclList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    var key = peg$currPos * 59 + 13;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsefuncDeclBegin();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsews();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
        s3 = peg$c4;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = [];
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        s6 = peg$parsews();
// @ts-ignore
        s7 = peg$parsefuncDeclBegin();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parsews();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
            s9 = peg$c4;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s9 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s6 = [s6, s7, s8, s9];
// @ts-ignore
            s5 = s6;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
        while (s5 !== peg$FAILED) {
// @ts-ignore
          s4.push(s5);
// @ts-ignore
          s5 = peg$currPos;
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          s7 = peg$parsefuncDeclBegin();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parsews();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
              s9 = peg$c4;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s6 = [s6, s7, s8, s9];
// @ts-ignore
              s5 = s6;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s5;
// @ts-ignore
              s5 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
        }
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f16(s1, s4);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestructDecl() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

// @ts-ignore
    var key = peg$currPos * 59 + 14;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c18) {
// @ts-ignore
      s1 = peg$c18;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsews();
// @ts-ignore
      s3 = peg$parseidentifier();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
          s5 = peg$c13;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          s7 = peg$parsetypeList();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parsews();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
              s9 = peg$c14;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e14); }
            }
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s10 = peg$parsews();
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
                s11 = peg$c4;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s11 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e4); }
              }
// @ts-ignore
              if (s11 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f17(s3, s7);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 6) === peg$c18) {
// @ts-ignore
        s1 = peg$c18;
// @ts-ignore
        peg$currPos += 6;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parsews();
// @ts-ignore
        s3 = peg$parseidentifier();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parsews();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
            s5 = peg$c1;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parsews();
// @ts-ignore
            s7 = peg$parsestructPropList();
// @ts-ignore
            if (s7 === peg$FAILED) {
// @ts-ignore
              s7 = null;
            }
// @ts-ignore
            s8 = peg$parsews();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
              s9 = peg$c2;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f18(s3, s7);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestructPropList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    var key = peg$currPos * 59 + 15;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsestructProp();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parsews();
// @ts-ignore
      s5 = peg$parsestructProp();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s4 = [s4, s5];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        s5 = peg$parsestructProp();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f19(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestructProp() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    var key = peg$currPos * 59 + 16;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseidentifier();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsews();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
        s3 = peg$c10;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        s5 = peg$parsetypeExpr();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
            s7 = peg$c4;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f20(s1, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsefuncDecl();
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseenumDecl() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    var key = peg$currPos * 59 + 17;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c19) {
// @ts-ignore
      s1 = peg$c19;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsews();
// @ts-ignore
      s3 = peg$parseidentifier();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
          s5 = peg$c1;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          s7 = peg$parseenumTagList();
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = null;
          }
// @ts-ignore
          s8 = peg$parsews();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
            s9 = peg$c2;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s9 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f21(s3, s7);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseenumTagList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    var key = peg$currPos * 59 + 18;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseenumTag();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parsews();
// @ts-ignore
      s5 = peg$parseenumTag();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s4 = [s4, s5];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        s5 = peg$parseenumTag();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f22(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseenumTag() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    var key = peg$currPos * 59 + 19;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseidentifier();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsews();
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
        s4 = peg$c13;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e13); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parsews();
// @ts-ignore
        s6 = peg$parsetypeExpr();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parsews();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
            s8 = peg$c14;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s8 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7, s8];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s4 = peg$c20;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s4 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f23(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetypeList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    var key = peg$currPos * 59 + 20;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsetypeExpr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parsews();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c20;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parsews();
// @ts-ignore
        s7 = peg$parsetypeExpr();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c20;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          s7 = peg$parsetypeExpr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f24(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsefuncDecl() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    var key = peg$currPos * 59 + 21;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c21) {
// @ts-ignore
      s1 = peg$c21;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parsews();
// @ts-ignore
    s3 = peg$parsefuncDeclBegin();
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$parsews();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
        s5 = peg$c1;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parsews();
// @ts-ignore
        s7 = peg$parseblock();
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          s7 = null;
        }
// @ts-ignore
        s8 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
          s9 = peg$c2;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s9 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
// @ts-ignore
        if (s9 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f25(s1, s3, s7);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsefuncDeclBegin() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

// @ts-ignore
    var key = peg$currPos * 59 + 22;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c22) {
// @ts-ignore
      s1 = peg$c22;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsews();
// @ts-ignore
      s3 = peg$parseidentifier();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
          s5 = peg$c13;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          s7 = peg$parseparameterList();
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = null;
          }
// @ts-ignore
          s8 = peg$parsews();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
            s9 = peg$c14;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s9 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s10 = peg$parsews();
// @ts-ignore
            s11 = peg$currPos;
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
              s12 = peg$c10;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s12 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e10); }
            }
// @ts-ignore
            if (s12 !== peg$FAILED) {
// @ts-ignore
              s13 = peg$parsews();
// @ts-ignore
              s14 = peg$parsetypeExpr();
// @ts-ignore
              if (s14 !== peg$FAILED) {
// @ts-ignore
                s12 = [s12, s13, s14];
// @ts-ignore
                s11 = s12;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s11;
// @ts-ignore
                s11 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s11;
// @ts-ignore
              s11 = peg$FAILED;
            }
// @ts-ignore
            if (s11 === peg$FAILED) {
// @ts-ignore
              s11 = null;
            }
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f26(s3, s7, s11);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseparameterList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    var key = peg$currPos * 59 + 23;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseparameter();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parsews();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c20;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parsews();
// @ts-ignore
        s7 = peg$parseparameter();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c20;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          s7 = peg$parseparameter();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      s3 = peg$parsews();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s4 = peg$c20;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s4 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f27(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseparameter() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    var key = peg$currPos * 59 + 24;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseidentifier();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsews();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
        s3 = peg$c10;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        s5 = peg$parsetypeExpr();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f28(s1, s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetypeExpr() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    var key = peg$currPos * 59 + 25;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 38) {
// @ts-ignore
      s1 = peg$c23;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsetypeExpr();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f29(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
        s1 = peg$c24;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parsews();
// @ts-ignore
        s3 = peg$parsetypeExpr();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parsews();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
            s5 = peg$c10;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e10); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parsews();
// @ts-ignore
            s7 = peg$parsedigits();
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              s8 = peg$parsews();
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
                s9 = peg$c25;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s9 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e25); }
              }
// @ts-ignore
              if (s9 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f30(s3, s7);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parsetypeRef();
      }
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetypeRef() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    var key = peg$currPos * 59 + 26;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseid();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f31(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseexpr() {
// @ts-ignore
    var s0;

// @ts-ignore
    var key = peg$currPos * 59 + 27;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$parseassignment();

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseassignment() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    var key = peg$currPos * 59 + 28;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsebool_or();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsews();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$parsews();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
        s6 = peg$c11;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s7 = peg$parsews();
// @ts-ignore
        s8 = peg$parsebool_or();
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6, s7, s8];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
          s6 = peg$c11;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parsews();
// @ts-ignore
          s8 = peg$parsebool_or();
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6, s7, s8];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f32(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsebool_or() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    var key = peg$currPos * 59 + 29;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$currPos;
// @ts-ignore
    s3 = peg$parsebool_and();
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$parsews();
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c26) {
// @ts-ignore
        s5 = peg$c26;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parsews();
// @ts-ignore
        s3 = [s3, s4, s5, s6];
// @ts-ignore
        s2 = s3;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s2;
// @ts-ignore
      s2 = peg$FAILED;
    }
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = peg$parsebool_and();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c26) {
// @ts-ignore
          s5 = peg$c26;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e26); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          s3 = [s3, s4, s5, s6];
// @ts-ignore
          s2 = s3;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
    }
// @ts-ignore
    s2 = peg$parsebool_and();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f33(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsebool_and() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    var key = peg$currPos * 59 + 30;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$currPos;
// @ts-ignore
    s3 = peg$parseequality();
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$parsews();
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c27) {
// @ts-ignore
        s5 = peg$c27;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e27); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parsews();
// @ts-ignore
        s3 = [s3, s4, s5, s6];
// @ts-ignore
        s2 = s3;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s2;
// @ts-ignore
      s2 = peg$FAILED;
    }
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = peg$parseequality();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c27) {
// @ts-ignore
          s5 = peg$c27;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          s3 = [s3, s4, s5, s6];
// @ts-ignore
          s2 = s3;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
    }
// @ts-ignore
    s2 = peg$parseequality();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f34(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseequality() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    var key = peg$currPos * 59 + 31;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$currPos;
// @ts-ignore
    s3 = peg$parseordering();
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$parsews();
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c28) {
// @ts-ignore
        s5 = peg$c28;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e28); }
      }
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c29) {
// @ts-ignore
          s5 = peg$c29;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e29); }
        }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parsews();
// @ts-ignore
        s3 = [s3, s4, s5, s6];
// @ts-ignore
        s2 = s3;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s2;
// @ts-ignore
      s2 = peg$FAILED;
    }
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = peg$parseordering();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c28) {
// @ts-ignore
          s5 = peg$c28;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c29) {
// @ts-ignore
            s5 = peg$c29;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e29); }
          }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          s3 = [s3, s4, s5, s6];
// @ts-ignore
          s2 = s3;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
    }
// @ts-ignore
    s2 = peg$parseordering();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f35(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseordering() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    var key = peg$currPos * 59 + 32;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$currPos;
// @ts-ignore
    s3 = peg$parseadditive();
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$parsews();
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c30) {
// @ts-ignore
        s5 = peg$c30;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e30); }
      }
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c31) {
// @ts-ignore
          s5 = peg$c31;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e31); }
        }
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 60) {
// @ts-ignore
            s5 = peg$c32;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e32); }
          }
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 62) {
// @ts-ignore
              s5 = peg$c33;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e33); }
            }
          }
        }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parsews();
// @ts-ignore
        s3 = [s3, s4, s5, s6];
// @ts-ignore
        s2 = s3;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s2;
// @ts-ignore
      s2 = peg$FAILED;
    }
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = peg$parseadditive();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c30) {
// @ts-ignore
          s5 = peg$c30;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e30); }
        }
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c31) {
// @ts-ignore
            s5 = peg$c31;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e31); }
          }
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 60) {
// @ts-ignore
              s5 = peg$c32;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e32); }
            }
// @ts-ignore
            if (s5 === peg$FAILED) {
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 62) {
// @ts-ignore
                s5 = peg$c33;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s5 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e33); }
              }
            }
          }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          s3 = [s3, s4, s5, s6];
// @ts-ignore
          s2 = s3;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
    }
// @ts-ignore
    s2 = peg$parseadditive();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f36(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseadditive() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    var key = peg$currPos * 59 + 33;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$currPos;
// @ts-ignore
    s3 = peg$parseterm();
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$parsews();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 43) {
// @ts-ignore
        s5 = peg$c34;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
          s5 = peg$c35;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e35); }
        }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parsews();
// @ts-ignore
        s3 = [s3, s4, s5, s6];
// @ts-ignore
        s2 = s3;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s2;
// @ts-ignore
      s2 = peg$FAILED;
    }
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = peg$parseterm();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 43) {
// @ts-ignore
          s5 = peg$c34;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e34); }
        }
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
            s5 = peg$c35;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e35); }
          }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          s3 = [s3, s4, s5, s6];
// @ts-ignore
          s2 = s3;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
    }
// @ts-ignore
    s2 = peg$parseterm();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f37(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseterm() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    var key = peg$currPos * 59 + 34;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$currPos;
// @ts-ignore
    s3 = peg$parseunary();
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$parsews();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 42) {
// @ts-ignore
        s5 = peg$c36;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 47) {
// @ts-ignore
          s5 = peg$c37;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e37); }
        }
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 37) {
// @ts-ignore
            s5 = peg$c38;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e38); }
          }
        }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parsews();
// @ts-ignore
        s3 = [s3, s4, s5, s6];
// @ts-ignore
        s2 = s3;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s2;
// @ts-ignore
      s2 = peg$FAILED;
    }
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = peg$parseunary();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 42) {
// @ts-ignore
          s5 = peg$c36;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e36); }
        }
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 47) {
// @ts-ignore
            s5 = peg$c37;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e37); }
          }
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 37) {
// @ts-ignore
              s5 = peg$c38;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e38); }
            }
          }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          s3 = [s3, s4, s5, s6];
// @ts-ignore
          s2 = s3;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
    }
// @ts-ignore
    s2 = peg$parseunary();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f38(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseunary() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    var key = peg$currPos * 59 + 35;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
      s1 = peg$c35;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsews();
// @ts-ignore
      s3 = peg$parsecasting();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f39(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 33) {
// @ts-ignore
        s1 = peg$c39;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parsews();
// @ts-ignore
        s3 = peg$parsecasting();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f40(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parsecasting();
      }
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecasting() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    var key = peg$currPos * 59 + 36;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsederef();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsews();
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c40) {
// @ts-ignore
        s3 = peg$c40;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e40); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 33) {
// @ts-ignore
          s4 = peg$c39;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = null;
        }
// @ts-ignore
        s5 = peg$parsews();
// @ts-ignore
        s6 = peg$parsetypeExpr();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f41(s1, s4, s6);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsederef();
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsederef() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    var key = peg$currPos * 59 + 37;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 64) {
// @ts-ignore
      s1 = peg$c41;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsecalling();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f42(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsecalling();
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecalling() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    var key = peg$currPos * 59 + 38;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 36) {
// @ts-ignore
      s1 = peg$c42;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseidentifier();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
          s4 = peg$c13;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parsews();
// @ts-ignore
          s6 = peg$parseexprList();
// @ts-ignore
          if (s6 === peg$FAILED) {
// @ts-ignore
            s6 = null;
          }
// @ts-ignore
          s7 = peg$parsews();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
            s8 = peg$c14;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s8 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f43(s2, s6);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseindexing();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
          s3 = peg$c13;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parsews();
// @ts-ignore
          s5 = peg$parseexprList();
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            s5 = null;
          }
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
            s7 = peg$c14;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f44(s1, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseindexing();
      }
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseindexing() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    var key = peg$currPos * 59 + 39;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsememberAccess();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parsews();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
        s5 = peg$c24;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parsews();
// @ts-ignore
        s7 = peg$parseassignment();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parsews();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
            s9 = peg$c25;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s9 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e25); }
          }
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7, s8, s9];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
          s5 = peg$c24;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e24); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          s7 = peg$parseassignment();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parsews();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
              s9 = peg$c25;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e25); }
            }
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s4 = [s4, s5, s6, s7, s8, s9];
// @ts-ignore
              s3 = s4;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s3;
// @ts-ignore
              s3 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f45(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsememberAccess();
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsememberAccess() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    var key = peg$currPos * 59 + 40;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$currPos;
// @ts-ignore
    s3 = peg$parsefactor();
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$parsews();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
        s5 = peg$c43;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e43); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parsews();
// @ts-ignore
        s3 = [s3, s4, s5, s6];
// @ts-ignore
        s2 = s3;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s2;
// @ts-ignore
      s2 = peg$FAILED;
    }
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = peg$parsefactor();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
          s5 = peg$c43;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e43); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          s3 = [s3, s4, s5, s6];
// @ts-ignore
          s2 = s3;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
    }
// @ts-ignore
    s2 = peg$parsefactor();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f46(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsefactor() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    var key = peg$currPos * 59 + 41;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
      s1 = peg$c13;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsews();
// @ts-ignore
      s3 = peg$parseassignment();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
          s5 = peg$c14;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f47(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsestructLiteral();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parsearrayLiteral();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parsestringLiteral();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parsecharLiteral();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parsenumber();
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$parsebool();
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  s0 = peg$parseid();
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestructLiteral() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    var key = peg$currPos * 59 + 42;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseid();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsews();
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c44) {
// @ts-ignore
        s3 = peg$c44;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e44); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
          s5 = peg$c1;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          s7 = peg$parsestructPropValueList();
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = null;
          }
// @ts-ignore
          s8 = peg$parsews();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
            s9 = peg$c2;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s9 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f48(s1, s7);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseid();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parsews();
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c44) {
// @ts-ignore
          s3 = peg$c44;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e44); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parsews();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
            s5 = peg$c13;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parsews();
// @ts-ignore
            s7 = peg$parseexprList();
// @ts-ignore
            if (s7 === peg$FAILED) {
// @ts-ignore
              s7 = null;
            }
// @ts-ignore
            s8 = peg$parsews();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
              s9 = peg$c14;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e14); }
            }
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f49(s1, s7);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestructPropValueList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    var key = peg$currPos * 59 + 43;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsestructPropValue();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parsews();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c20;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parsews();
// @ts-ignore
        s7 = peg$parsestructPropValue();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c20;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          s7 = peg$parsestructPropValue();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f50(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestructPropValue() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    var key = peg$currPos * 59 + 44;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseidentifier();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsews();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
        s3 = peg$c10;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        s5 = peg$parseassignment();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f51(s1, s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestringLiteral() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    var key = peg$currPos * 59 + 45;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsequotedString();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f52(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsequotedString() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    var key = peg$currPos * 59 + 46;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
      s1 = peg$c45;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 92) {
// @ts-ignore
        s4 = peg$c46;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        if (input.length > peg$currPos) {
// @ts-ignore
          s5 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e47); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s3 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e48); }
        }
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 92) {
// @ts-ignore
          s4 = peg$c46;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e46); }
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          if (input.length > peg$currPos) {
// @ts-ignore
            s5 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e47); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s3 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s3 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e48); }
          }
        }
      }
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
        s3 = peg$c45;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e45); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f53(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecharLiteral() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    var key = peg$currPos * 59 + 47;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
      s1 = peg$c47;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 92) {
// @ts-ignore
        s3 = peg$c46;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      if (input.length > peg$currPos) {
// @ts-ignore
        s4 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e47); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s3 = [s3, s4];
// @ts-ignore
        s2 = s3;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
          s3 = peg$c47;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e49); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f54(s2);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsearrayLiteral() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    var key = peg$currPos * 59 + 48;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
      s1 = peg$c24;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsews();
// @ts-ignore
      s3 = peg$parseassignment();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
          s5 = peg$c10;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          s7 = peg$parseinteger();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parsews();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
              s9 = peg$c25;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e25); }
            }
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f55(s3, s7);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
        s1 = peg$c24;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parsews();
// @ts-ignore
        s3 = peg$parseexprList();
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s3 = null;
        }
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
          s5 = peg$c25;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f56(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseexprList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    var key = peg$currPos * 59 + 49;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseassignment();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parsews();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c20;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parsews();
// @ts-ignore
        s7 = peg$parseassignment();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parsews();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c20;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parsews();
// @ts-ignore
          s7 = peg$parseassignment();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f57(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsenumber() {
// @ts-ignore
    var s0;

// @ts-ignore
    var key = peg$currPos * 59 + 50;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$parsefloat();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseinteger();
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseinteger() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    var key = peg$currPos * 59 + 51;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsedigits();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 95) {
// @ts-ignore
        s3 = peg$c48;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 105) {
// @ts-ignore
          s4 = peg$c49;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e51); }
        }
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 117) {
// @ts-ignore
            s4 = peg$c50;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e52); }
          }
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 56) {
// @ts-ignore
            s5 = peg$c51;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e53); }
          }
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 2) === peg$c52) {
// @ts-ignore
              s5 = peg$c52;
// @ts-ignore
              peg$currPos += 2;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e54); }
            }
// @ts-ignore
            if (s5 === peg$FAILED) {
// @ts-ignore
              if (input.substr(peg$currPos, 2) === peg$c53) {
// @ts-ignore
                s5 = peg$c53;
// @ts-ignore
                peg$currPos += 2;
// @ts-ignore
              } else {
// @ts-ignore
                s5 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e55); }
              }
// @ts-ignore
              if (s5 === peg$FAILED) {
// @ts-ignore
                if (input.substr(peg$currPos, 2) === peg$c54) {
// @ts-ignore
                  s5 = peg$c54;
// @ts-ignore
                  peg$currPos += 2;
// @ts-ignore
                } else {
// @ts-ignore
                  s5 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e56); }
                }
              }
            }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s3 = [s3, s4, s5];
// @ts-ignore
            s2 = s3;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s2;
// @ts-ignore
            s2 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f58(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsedigits() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    var key = peg$currPos * 59 + 52;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    if (peg$r1.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s2 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      while (s2 !== peg$FAILED) {
// @ts-ignore
        s1.push(s2);
// @ts-ignore
        if (peg$r1.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s2 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e57); }
        }
      }
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f59(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsefloat() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    var key = peg$currPos * 59 + 53;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    if (peg$r1.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s2 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      while (s2 !== peg$FAILED) {
// @ts-ignore
        s1.push(s2);
// @ts-ignore
        if (peg$r1.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s2 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e57); }
        }
      }
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
        s2 = peg$c43;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e43); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = [];
// @ts-ignore
        if (peg$r1.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s4 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e57); }
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          while (s4 !== peg$FAILED) {
// @ts-ignore
            s3.push(s4);
// @ts-ignore
            if (peg$r1.test(input.charAt(peg$currPos))) {
// @ts-ignore
              s4 = input.charAt(peg$currPos);
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s4 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e57); }
            }
          }
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$currPos;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 95) {
// @ts-ignore
            s5 = peg$c48;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e50); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 102) {
// @ts-ignore
              s6 = peg$c55;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e58); }
            }
// @ts-ignore
            if (s6 !== peg$FAILED) {
// @ts-ignore
              if (input.substr(peg$currPos, 2) === peg$c53) {
// @ts-ignore
                s7 = peg$c53;
// @ts-ignore
                peg$currPos += 2;
// @ts-ignore
              } else {
// @ts-ignore
                s7 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e55); }
              }
// @ts-ignore
              if (s7 === peg$FAILED) {
// @ts-ignore
                if (input.substr(peg$currPos, 2) === peg$c54) {
// @ts-ignore
                  s7 = peg$c54;
// @ts-ignore
                  peg$currPos += 2;
// @ts-ignore
                } else {
// @ts-ignore
                  s7 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e56); }
                }
              }
// @ts-ignore
              if (s7 !== peg$FAILED) {
// @ts-ignore
                s5 = [s5, s6, s7];
// @ts-ignore
                s4 = s5;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s4;
// @ts-ignore
                s4 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s4;
// @ts-ignore
              s4 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
          if (s4 === peg$FAILED) {
// @ts-ignore
            s4 = null;
          }
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f60(s1, s3, s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsebool() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    var key = peg$currPos * 59 + 54;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c56) {
// @ts-ignore
      s1 = peg$c56;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f61();
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 5) === peg$c57) {
// @ts-ignore
        s1 = peg$c57;
// @ts-ignore
        peg$currPos += 5;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e60); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f62();
      }
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseid() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    var key = peg$currPos * 59 + 55;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseidentifier();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c44) {
// @ts-ignore
        s4 = peg$c44;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e44); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parseidentifier();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        while (s3 !== peg$FAILED) {
// @ts-ignore
          s2.push(s3);
// @ts-ignore
          s3 = peg$currPos;
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c44) {
// @ts-ignore
            s4 = peg$c44;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e44); }
          }
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            s5 = peg$parseidentifier();
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              s4 = [s4, s5];
// @ts-ignore
              s3 = s4;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s3;
// @ts-ignore
              s3 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
        }
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f63(s1, s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseidentifier();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f64(s1);
      }
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseidentifier() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    var key = peg$currPos * 59 + 56;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (peg$r2.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s1 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      if (peg$r3.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e63); }
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        if (peg$r3.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s3 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e63); }
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f65(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsews() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    var key = peg$currPos * 59 + 57;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s0 = [];
// @ts-ignore
    if (peg$r4.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s1 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parsecomment();
    }
// @ts-ignore
    while (s1 !== peg$FAILED) {
// @ts-ignore
      s0.push(s1);
// @ts-ignore
      if (peg$r4.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s1 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e65); }
      }
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parsecomment();
      }
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    s1 = peg$FAILED;
// @ts-ignore
    if (peg$silentFails === 0) { peg$fail(peg$e64); }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecomment() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    var key = peg$currPos * 59 + 58;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c58) {
// @ts-ignore
      s1 = peg$c58;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      if (peg$r5.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e67); }
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        if (peg$r5.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s3 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e67); }
        }
      }
// @ts-ignore
      s1 = [s1, s2];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }


// @ts-ignore
  let spec:typeof specGen = {} as unknown as typeof specGen;

// @ts-ignore
  if (options.includeLocations) {
// @ts-ignore
    for (const key in specGen) {
// @ts-ignore
      if (key.startsWith('make')) {
// @ts-ignore
        (spec as any)[key] = (...args:any[]) => {
// @ts-ignore
          const node = (specGen as any)[key](...args);
// @ts-ignore
          node.location = location();
// @ts-ignore
          return node;
        }
// @ts-ignore
      } else {
// @ts-ignore
        (spec as any)[key] = (specGen as any)[key];
      }
    }
// @ts-ignore
  } else {
// @ts-ignore
    spec = specGen;
  }


// @ts-ignore
  peg$result = peg$startRuleFunction();

// @ts-ignore
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
// @ts-ignore
    return peg$result;
// @ts-ignore
  } else {
// @ts-ignore
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
// @ts-ignore
      peg$fail(peg$endExpectation());
    }

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      peg$maxFailExpected,
// @ts-ignore
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
// @ts-ignore
      peg$maxFailPos < input.length
// @ts-ignore
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
// @ts-ignore
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

// @ts-ignore
  return {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})()

export interface FilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface FileRange {
  start: FilePosition;
  end: FilePosition;
  source: string;
}

export interface LiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface ClassParts extends Array<string | ClassParts> {}

export interface ClassExpectation {
  type: "class";
  parts: ClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface AnyExpectation {
  type: "any";
}

export interface EndExpectation {
  type: "end";
}

export interface OtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = LiteralExpectation | ClassExpectation | AnyExpectation | EndExpectation | OtherExpectation;

declare class _PeggySyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null): string;
  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: FileRange;
  public name: string;
  constructor(message: string, expected: Expectation[], found: string | null, location: FileRange);
  format(sources: {
    source?: any;
    text: string;
  }[]): string;
}

export interface TraceEvent {
    type: string;
    rule: string;
    result?: any;
    location: FileRange;
  }

declare class _DefaultTracer {
  private indentLevel: number;
  public trace(event: TraceEvent): void;
}

peggyParser.SyntaxError.prototype.name = "PeggySyntaxError";

export interface ParseOptions {
  filename?: string;
  startRule?: "start" | "expr" | "statement" | "block" | "funcDecl" | "structDecl" | "enumDecl" | "typeExpr";
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = <Options extends ParseOptions>(
    input: string,
    options?: Options
  ) => Options extends { startRule: infer StartRule } ?
    StartRule extends "start" ? Start :
    StartRule extends "expr" ? Expr :
    StartRule extends "statement" ? Statement :
    StartRule extends "block" ? Block :
    StartRule extends "funcDecl" ? FuncDecl :
    StartRule extends "structDecl" ? StructDecl :
    StartRule extends "enumDecl" ? EnumDecl :
    StartRule extends "typeExpr" ? TypeExpr : Start
    : Start;
export const parse: ParseFunction = peggyParser.parse;

export const PeggySyntaxError = peggyParser.SyntaxError as typeof _PeggySyntaxError;

export type PeggySyntaxError = _PeggySyntaxError;

// These types were autogenerated by ts-pegjs
export type Start = File | Block | Statement | Assignment | any;
export type File = any;
export type FileStatementList = [FileStatement, ...any[]];
export type FileStatement = ModuleStatement | Statement;
export type ModuleDecl = any;
export type ModuleDeclList = [ModuleStatement, ...any[]];
export type ModuleStatement =
  | any
  | FuncDecl
  | ExternDecl
  | StructDecl
  | EnumDecl
  | ModuleDecl;
export type Block = any;
export type Statement = any | IfStatement | WhileStatement | Block;
export type VarDecl = { name: Identifier; type: any; expr: any };
export type WhileStatement = any;
export type IfStatement = any;
export type ExternDecl = any;
export type ExternDeclList = [FuncDeclBegin, ...any[]];
export type StructDecl = any;
export type StructPropList = [StructProp, ...any[]];
export type StructProp = any | FuncDecl;
export type EnumDecl = any;
export type EnumTagList = [EnumTag, ...any[]];
export type EnumTag = any;
export type TypeList = [TypeExpr, ...any[]];
export type FuncDecl = any;
export type FuncDeclBegin = {
  name: Identifier;
  parameters: any;
  returnType: any;
};
export type ParameterList = any;
export type Parameter = any;
export type TypeExpr = any | TypeRef;
export type TypeRef = any;
export type Expr = Assignment;
export type Assignment = any;
export type BoolOr = any;
export type BoolAnd = any;
export type Equality = any;
export type Ordering = any;
export type Additive = any;
export type Term = any;
export type Unary = any | Casting;
export type Casting = any | Deref;
export type Deref = any | Calling;
export type Calling = any | Indexing;
export type Indexing = any | MemberAccess;
export type MemberAccess = any;
export type Factor =
  | Assignment
  | StructLiteral
  | ArrayLiteral
  | StringLiteral
  | CharLiteral
  | Number_1
  | Bool
  | Id;
export type StructLiteral = any;
export type StructPropValueList = [StructPropValue, ...any[]];
export type StructPropValue = any;
export type StringLiteral = any;
export type QuotedString = any;
export type CharLiteral = any;
export type ArrayLiteral = any;
export type ExprList = [Assignment, ...any[]];
export type Number_1 = Float | Integer;
export type Integer = any;
export type Digits = number;
export type Float = any;
export type Bool = any;
export type Id = any;
export type Identifier = string;
export type Ws = (string | Comment)[];
export type Comment = ["//", string[]];
