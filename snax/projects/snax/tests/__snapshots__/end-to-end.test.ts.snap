// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`assignment operator compiles assignments to registers 1`] = `
"(module
 (type $none_=>_i32 (func (result i32)))
 (global $g0:#SP (mut i32) (i32.const 0))
 (memory $0 1 1)
 (export \\"_start\\" (func $_start))
 (export \\"stackPointer\\" (global $g0:#SP))
 (export \\"memory\\" (memory $0))
 (func $<main>f0 (result i32)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  ;;@ :2:7
  (nop)
  ;;@ :3:7
  (drop
   (local.tee $1
    (i32.const 54)
   )
  )
  ;;@ :4:7
  (return
   (local.get $1)
  )
 )
 (func $_start (result i32)
  (global.set $g0:#SP
   (i32.const 65536)
  )
  (return
   (call $<main>f0)
  )
 )
)
"
`;

exports[`control flow while loops compiles while statements 1`] = `
"(module
 (type $none_=>_i32 (func (result i32)))
 (global $g0:#SP (mut i32) (i32.const 0))
 (memory $0 1 1)
 (export \\"_start\\" (func $_start))
 (export \\"stackPointer\\" (global $g0:#SP))
 (export \\"memory\\" (memory $0))
 (func $<main>f0 (result i32)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  ;;@ :2:11
  (local.set $1
   ;;@ :2:19
   (i32.const 0)
  )
  ;;@ :3:11
  (loop $while_0
   ;;@ :4:13
   (block
    (drop
     (local.tee $1
      (i32.add
       ;;@ :4:17
       (local.get $1)
       ;;@ :4:19
       (i32.const 1)
      )
     )
    )
   )
   (br_if $while_0
    (i32.lt_s
     ;;@ :3:18
     (local.get $1)
     ;;@ :3:22
     (i32.const 10)
    )
   )
  )
  ;;@ :6:11
  (return
   (local.get $1)
  )
 )
 (func $_start (result i32)
  (global.set $g0:#SP
   (i32.const 65536)
  )
  (return
   (call $<main>f0)
  )
 )
)
"
`;

exports[`empty module compiles an empty program 1`] = `
"(module
 (type $none_=>_none (func))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (global $g0:#SP (mut i32) (i32.const 0))
 (global $g1:next (mut i32) (i32.const 0))
 (memory $0 10 10)
 (export \\"_start\\" (func $_start))
 (export \\"stackPointer\\" (global $g0:#SP))
 (export \\"memory\\" (memory $0))
 (func $<main>f0
  (local $0 i32)
 )
 (func $<malloc>f1 (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  ;;@ :4:11
  (local.set $2
   ;;@ :4:30
   (global.get $g1:next)
  )
  ;;@ :5:11
  (memory.fill
   ;;@ :5:24
   (local.get $2)
   ;;@ :5:38
   (i32.const 0)
   ;;@ :5:41
   (local.get $0)
  )
  ;;@ :6:11
  (drop
   (block (result i32)
    (global.set $g1:next
     (i32.add
      ;;@ :6:18
      (global.get $g1:next)
      ;;@ :6:25
      (local.get $0)
     )
    )
    (global.get $g1:next)
   )
  )
  ;;@ :7:11
  (return
   ;;@ :7:18
   (local.get $2)
  )
 )
 (func $_start
  (global.set $g0:#SP
   (i32.const 655360)
  )
  (return
   (call $<main>f0)
  )
 )
)
"
`;

exports[`empty module compiles integers 1`] = `
"(module
 (type $none_=>_i32 (func (result i32)))
 (global $g0:#SP (mut i32) (i32.const 0))
 (memory $0 10 10)
 (export \\"_start\\" (func $_start))
 (export \\"stackPointer\\" (global $g0:#SP))
 (export \\"memory\\" (memory $0))
 (func $<main>f0 (result i32)
  (local $0 i32)
  ;;@ :1:1
  (return
   ;;@ :1:1
   (i32.const 123)
  )
 )
 (func $_start (result i32)
  (global.set $g0:#SP
   (i32.const 655360)
  )
  (return
   (call $<main>f0)
  )
 )
)
"
`;

exports[`empty module compiles integers 2`] = `"{\\"version\\":3,\\"sources\\":[\\"\\",\\"\\"],\\"names\\":[],\\"mappings\\":\\"6ECAC,ADAA\\"}"`;

exports[`empty module compiles to binaryen module 1`] = `
"(module
 (type $none_=>_none (func))
 (global $g0:#SP (mut i32) (i32.const 0))
 (memory $0 1 1)
 (export \\"_start\\" (func $_start))
 (export \\"stackPointer\\" (global $g0:#SP))
 (export \\"memory\\" (memory $0))
 (func $<main>f0
  (local $0 i32)
 )
 (func $_start
  (global.set $g0:#SP
   (i32.const 65536)
  )
  (return
   (call $<main>f0)
  )
 )
)
"
`;

exports[`empty module compiles to binaryen module 2`] = `"{\\"version\\":3,\\"sources\\":[],\\"names\\":[],\\"mappings\\":\\"\\"}"`;

exports[`let statements allocates space on the stack, and initializes values to 0 1`] = `
"(module
 (type $none_=>_i32 (func (result i32)))
 (global $g0:#SP (mut i32) (i32.const 0))
 (memory $0 1 1)
 (export \\"_start\\" (func $_start))
 (export \\"stackPointer\\" (global $g0:#SP))
 (export \\"memory\\" (memory $0))
 (func $<main>f0 (result i32)
  (local $0 i32)
  (global.set $g0:#SP
   (i32.sub
    (global.get $g0:#SP)
    (i32.const 9)
   )
  )
  (local.set $0
   (global.get $g0:#SP)
  )
  ;;@ :2:7
  (memory.fill
   (local.get $0)
   (i32.const 0)
   (i32.const 4)
  )
  ;;@ :3:7
  (memory.fill
   (i32.add
    (i32.const 4)
    (local.get $0)
   )
   (i32.const 0)
   (i32.const 1)
  )
  ;;@ :4:7
  (memory.fill
   (i32.add
    (i32.const 5)
    (local.get $0)
   )
   (i32.const 0)
   (i32.const 4)
  )
  ;;@ :5:7
  (return
   (i32.load
    (local.get $0)
   )
  )
 )
 (func $_start (result i32)
  (global.set $g0:#SP
   (i32.const 65536)
  )
  (return
   (call $<main>f0)
  )
 )
)
"
`;

exports[`reg statements compiles reg statements 1`] = `
"(module
 (type $none_=>_i32 (func (result i32)))
 (global $g0:#SP (mut i32) (i32.const 0))
 (memory $0 1 1)
 (export \\"_start\\" (func $_start))
 (export \\"stackPointer\\" (global $g0:#SP))
 (export \\"memory\\" (memory $0))
 (func $<main>f0 (result i32)
  (local $0 i32)
  (local $1 i32)
  ;;@ :1:1
  (local.set $1
   ;;@ :1:9
   (i32.const 3)
  )
  ;;@ :1:12
  (return
   (local.get $1)
  )
 )
 (func $_start (result i32)
  (global.set $g0:#SP
   (i32.const 65536)
  )
  (return
   (call $<main>f0)
  )
 )
)
"
`;

exports[`reg statements compiles reg statements into function local allocations 1`] = `
"(module
 (type $none_=>_none (func))
 (global $g0:#SP (mut i32) (i32.const 0))
 (memory $0 1 1)
 (export \\"_start\\" (func $_start))
 (export \\"stackPointer\\" (global $g0:#SP))
 (export \\"memory\\" (memory $0))
 (func $<main>f0
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 f64)
  ;;@ :2:7
  (nop)
  ;;@ :3:7
  (nop)
  ;;@ :4:7
  (nop)
 )
 (func $_start
  (global.set $g0:#SP
   (i32.const 65536)
  )
  (return
   (call $<main>f0)
  )
 )
)
"
`;
