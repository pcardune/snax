import io from "snax/io.snx"
import string from "snax/string.snx"
import mem from "snax/memory.snx"

global alloc_start: &usize = 0 as! &usize;
global alloc_max_offset: usize = 0;

func init_allocator(maxHeapSize:usize) {
  io::printStr(@"init_allocator(");
  io::print_u32(maxHeapSize);
  io::printStr(@")\n");

  // reg heap32 = $heap_start() as! &usize;
  reg heap32 = mem::malloc(maxHeapSize);
  alloc_start = heap32 as! &usize;
  alloc_max_offset = maxHeapSize/4;
  
  io::printStr(@"Heap start: ");
  io::print_u32(alloc_start as u32);
  io::printStr(@" Max Offset: ");
  io::print_u32(alloc_max_offset);
  io::printStr(@"\n");
  alloc_start[0] = maxHeapSize - 8;
  alloc_start[1] = 0_u32;
  return heap32;
}

func dump_block_info(blockIndex:u32, offset:u32, blockSize:u32, free:bool) {
  io::printStr(@"  ");
  io::print_u32(blockIndex);
  io::printStr(@":\t");
  io::print_u32(offset);
  io::printStr(@"\t");
  io::print_u32(offset*4+(alloc_start as u32));
  io::printStr(@"\t");
  io::print_u32(offset*4+8+(alloc_start as u32));
  io::printStr(@"\t");
  io::print_u32(blockSize);
  if (free) {
    io::printStr(@"\tyes");
  } else {
    io::printStr(@"\tno");
  }
  io::printStr(@"\n");
}

func dump_allocations() {
  io::printStr(@"  #\toffset\t@block\t@ptr\tsize\tfree?\n");
  reg region = alloc_start;
  reg blockIndex = 0_u32;
  reg offset = 0_u32;
  reg blockSize = region[offset];
  reg free = region[offset+1] == 0;

  while (blockIndex < 4 && offset < alloc_max_offset) {
    dump_block_info(blockIndex, offset, blockSize, free);

    blockIndex = blockIndex+1;
    offset = offset + 2 + blockSize/4;
    blockSize = region[offset];
    free = region[offset+1] == 0;
  }
}

func allocate_memory(numBytes:usize):i32 {
  io::printStr(@"\nallocate_memory(");
  io::print_u32(numBytes);
  io::printStr(@")\n");
  
  if (numBytes % 4 > 0) {
    // align numBytes to 4 byte word size
    numBytes = numBytes + 4 - (numBytes % 4);
  }
  
  reg heap32 = alloc_start;
  
  reg index = 0_u32;
  reg blockSize = heap32[index];
  reg free = heap32[index+1] == 0;
  while ((!free || blockSize < numBytes) && index < alloc_max_offset) {
    index = index + 2 + blockSize/4;
    // if index > maxIndex { oom(); }
    blockSize = heap32[index];
    free = heap32[index+1] == 0;
  }
  io::printStr(@"Found free block at ");
  io::print_u32(index);
  io::printStr(@" of size ");
  io::print_u32(blockSize);
  io::printStr(@"\n");

  
  // set the size of this block 
  heap32[index] = numBytes;
  // mark the block as non-free
  heap32[index+1] = 1_u32;
  if (numBytes < blockSize) {
    // add a new block marker to split the block
    // set the size of the next block
    heap32[index + 2 + numBytes/4] = blockSize - numBytes - 8;
  }

  dump_allocations();
  reg result = @heap32[index+2] as i32;
  return result;
}

func free(addr:usize) {
  io::printStr(@"\nfree(");
  io::print_u32(addr);
  io::printStr(@")\n");

  reg offset = (addr - alloc_start as usize)/4 - 2;
  alloc_start[offset+1] = 0_u32;

  dump_allocations();
}

func main() {
  init_allocator(100);
  dump_allocations();
  reg a1 = allocate_memory(4) as! u32;
  reg a2 = allocate_memory(22) as! u32;
  reg a3 = allocate_memory(7) as! u32;
  io::printStr(@"\na1 is at ");
  io::print_u32(a1);
  io::printStr(@"\na2 is at ");
  io::print_u32(a2);
  io::printStr(@"\na3 is at ");
  io::print_u32(a3);

  free(a1);
  a1 = allocate_memory(4) as! u32;
  free(a2);
  a2 = allocate_memory(9) as! u32;
}